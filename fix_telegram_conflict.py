#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram conflict
–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç webhook –∏ pending updates
"""

import asyncio
import os
from aiogram import Bot

async def fix_conflict():
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ docker-compose.yml –∏–ª–∏ .env
    # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.getenv('BOT_TOKEN')
    
    if not token:
        print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("–£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω:")
        token = input().strip()
    
    print(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Telegram conflict –¥–ª—è –±–æ—Ç–∞...")
    
    bot = Bot(token=token)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
        webhook_info = await bot.get_webhook_info()
        print(f"\nüìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:")
        print(f"   Webhook URL: {webhook_info.url or '(–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)'}")
        print(f"   Pending updates: {webhook_info.pending_update_count}")
        
        # –£–¥–∞–ª—è–µ–º webhook –∏ –≤—Å–µ pending updates
        print(f"\nüßπ –û—á–∏—Å—Ç–∫–∞...")
        result = await bot.delete_webhook(drop_pending_updates=True)
        
        if result:
            print("‚úÖ Webhook —É–¥–∞–ª–µ–Ω")
            print("‚úÖ Pending updates —Å–±—Ä–æ—à–µ–Ω—ã")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        me = await bot.get_me()
        print(f"\nü§ñ –ë–æ—Ç:")
        print(f"   Username: @{me.username}")
        print(f"   ID: {me.id}")
        print(f"   Name: {me.first_name}")
        
        print("\n‚úÖ Conflict –∏—Å–ø—Ä–∞–≤–ª–µ–Ω!")
        print("   –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(fix_conflict())

