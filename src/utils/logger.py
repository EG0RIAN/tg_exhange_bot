"""
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ –≤—Å–µ–º –ø—Ä–æ–µ–∫—Ç–µ
"""

import logging
import sys
from functools import wraps
from typing import Callable, Any
from datetime import datetime
import traceback


# ============================================================================
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# ============================================================================

LOG_FORMAT = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
LOG_DATE_FORMAT = '%Y-%m-%d %H:%M:%S'

# –¶–≤–µ—Ç–Ω—ã–µ –ª–æ–≥–∏ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
COLORS = {
    'DEBUG': '\033[36m',      # Cyan
    'INFO': '\033[32m',       # Green
    'WARNING': '\033[33m',    # Yellow
    'ERROR': '\033[31m',      # Red
    'CRITICAL': '\033[35m',   # Magenta
    'RESET': '\033[0m'        # Reset
}


class ColoredFormatter(logging.Formatter):
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å —Ü–≤–µ—Ç–Ω—ã–º –≤—ã–≤–æ–¥–æ–º"""
    
    def format(self, record):
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç –∫ —É—Ä–æ–≤–Ω—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        levelname = record.levelname
        if levelname in COLORS:
            record.levelname = f"{COLORS[levelname]}{levelname}{COLORS['RESET']}"
        return super().format(record)


def setup_logging(level: str = "INFO", colored: bool = True):
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    
    Args:
        level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (DEBUG, INFO, WARNING, ERROR)
        colored: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ü–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥
    """
    log_level = getattr(logging, level.upper(), logging.INFO)
    
    # –°–æ–∑–¥–∞–µ–º handler –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(log_level)
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
    if colored:
        formatter = ColoredFormatter(LOG_FORMAT, datefmt=LOG_DATE_FORMAT)
    else:
        formatter = logging.Formatter(LOG_FORMAT, datefmt=LOG_DATE_FORMAT)
    
    console_handler.setFormatter(formatter)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º root logger
    root_logger = logging.getLogger()
    root_logger.setLevel(log_level)
    root_logger.handlers = []  # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ handlers
    root_logger.addHandler(console_handler)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ (—É–º–µ–Ω—å—à–∞–µ–º verbose)
    logging.getLogger('httpx').setLevel(logging.WARNING)
    logging.getLogger('httpcore').setLevel(logging.WARNING)
    logging.getLogger('aiogram').setLevel(logging.INFO)
    logging.getLogger('apscheduler').setLevel(logging.WARNING)
    
    logging.info(f"Logging configured: level={level}, colored={colored}")


# ============================================================================
# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# ============================================================================

def log_function(func: Callable) -> Callable:
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π
    
    –õ–æ–≥–∏—Ä—É–µ—Ç:
    - –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    - –í—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    - –û—à–∏–±–∫–∏ —Å –ø–æ–ª–Ω—ã–º traceback
    - –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    logger = logging.getLogger(func.__module__)
    
    @wraps(func)
    async def async_wrapper(*args, **kwargs):
        func_name = func.__name__
        start_time = datetime.now()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (–±–µ–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
        args_str = _format_args(args, kwargs)
        
        logger.debug(f"‚Üí {func_name}({args_str})")
        
        try:
            result = await func(*args, **kwargs)
            
            duration = (datetime.now() - start_time).total_seconds() * 1000
            logger.debug(f"‚Üê {func_name} completed in {duration:.0f}ms")
            
            return result
            
        except Exception as e:
            duration = (datetime.now() - start_time).total_seconds() * 1000
            logger.error(
                f"‚úó {func_name} failed after {duration:.0f}ms: {e}",
                exc_info=True
            )
            raise
    
    @wraps(func)
    def sync_wrapper(*args, **kwargs):
        func_name = func.__name__
        start_time = datetime.now()
        
        args_str = _format_args(args, kwargs)
        logger.debug(f"‚Üí {func_name}({args_str})")
        
        try:
            result = func(*args, **kwargs)
            
            duration = (datetime.now() - start_time).total_seconds() * 1000
            logger.debug(f"‚Üê {func_name} completed in {duration:.0f}ms")
            
            return result
            
        except Exception as e:
            duration = (datetime.now() - start_time).total_seconds() * 1000
            logger.error(
                f"‚úó {func_name} failed after {duration:.0f}ms: {e}",
                exc_info=True
            )
            raise
    
    # –í—ã–±–∏—Ä–∞–µ–º async –∏–ª–∏ sync wrapper
    import asyncio
    if asyncio.iscoroutinefunction(func):
        return async_wrapper
    else:
        return sync_wrapper


def log_handler(handler_name: str = None):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Aiogram
    
    –õ–æ–≥–∏—Ä—É–µ—Ç:
    - –í—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è/callback
    - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - –¢–µ–∫—Å—Ç/–¥–∞–Ω–Ω—ã–µ
    - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    def decorator(func: Callable) -> Callable:
        logger = logging.getLogger(func.__module__)
        name = handler_name or func.__name__
        
        @wraps(func)
        async def wrapper(*args, **kwargs):
            start_time = datetime.now()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
            event = None
            user_id = None
            event_data = None
            
            for arg in args:
                if hasattr(arg, 'from_user'):
                    user_id = arg.from_user.id
                    if hasattr(arg, 'text'):
                        event_data = arg.text
                        event = "message"
                    elif hasattr(arg, 'data'):
                        event_data = arg.data
                        event = "callback"
            
            logger.info(
                f"üéØ Handler [{name}] started: user={user_id}, "
                f"type={event}, data={event_data}"
            )
            
            try:
                result = await func(*args, **kwargs)
                
                duration = (datetime.now() - start_time).total_seconds() * 1000
                logger.info(
                    f"‚úÖ Handler [{name}] completed in {duration:.0f}ms"
                )
                
                return result
                
            except Exception as e:
                duration = (datetime.now() - start_time).total_seconds() * 1000
                logger.error(
                    f"‚ùå Handler [{name}] failed after {duration:.0f}ms: {e}",
                    exc_info=True
                )
                raise
        
        return wrapper
    return decorator


# ============================================================================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ============================================================================

def _format_args(args: tuple, kwargs: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–±–µ–∑ sensitive –¥–∞–Ω–Ω—ã—Ö)"""
    sensitive_keys = {'password', 'token', 'secret', 'api_key'}
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º args (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3)
    args_strs = []
    for i, arg in enumerate(args[:3]):
        if i == 0 and hasattr(arg, '__class__'):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º self/cls
            continue
        args_strs.append(_format_value(arg))
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º kwargs
    kwargs_strs = []
    for key, value in kwargs.items():
        if key.lower() in sensitive_keys:
            kwargs_strs.append(f"{key}=***")
        else:
            kwargs_strs.append(f"{key}={_format_value(value)}")
    
    all_args = args_strs + kwargs_strs
    return ", ".join(all_args) if all_args else ""


def _format_value(value: Any) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞"""
    if isinstance(value, str):
        return f'"{value[:50]}"' if len(value) > 50 else f'"{value}"'
    elif isinstance(value, (int, float, bool)):
        return str(value)
    elif value is None:
        return "None"
    else:
        return type(value).__name__


def log_error_with_context(logger, message: str, error: Exception, **context):
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    
    Args:
        logger: Logger instance
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        error: Exception –æ–±—ä–µ–∫—Ç
        **context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (user_id, order_id, –∏ —Ç.–¥.)
    """
    context_str = ", ".join(f"{k}={v}" for k, v in context.items())
    full_message = f"{message} [{context_str}]: {error}"
    
    logger.error(full_message, exc_info=True)


def get_logger(name: str) -> logging.Logger:
    """
    –ü–æ–ª—É—á–∞–µ—Ç logger —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º
    
    Args:
        name: –ò–º—è –º–æ–¥—É–ª—è (–æ–±—ã—á–Ω–æ __name__)
        
    Returns:
        Logger instance
    """
    return logging.getLogger(name)


# ============================================================================
# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
# ============================================================================

class PerformanceLogger:
    """–õ–æ–≥–≥–µ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self, logger: logging.Logger, operation: str):
        self.logger = logger
        self.operation = operation
        self.start_time = None
    
    def __enter__(self):
        self.start_time = datetime.now()
        self.logger.debug(f"‚è±Ô∏è {self.operation} started")
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        duration = (datetime.now() - self.start_time).total_seconds() * 1000
        
        if exc_type:
            self.logger.error(
                f"‚è±Ô∏è {self.operation} failed after {duration:.0f}ms: {exc_val}"
            )
        else:
            if duration > 1000:
                self.logger.warning(
                    f"‚è±Ô∏è {self.operation} completed in {duration:.0f}ms (SLOW!)"
                )
            else:
                self.logger.debug(
                    f"‚è±Ô∏è {self.operation} completed in {duration:.0f}ms"
                )
        
        return False  # –ù–µ –ø–æ–¥–∞–≤–ª—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ


# ============================================================================
# Structured logging helpers
# ============================================================================

def log_user_action(logger, user_id: int, action: str, **details):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    details_str = ", ".join(f"{k}={v}" for k, v in details.items())
    logger.info(f"üë§ User {user_id}: {action} [{details_str}]")


def log_order_event(logger, order_id: int, event: str, **details):
    """–õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∑–∞—è–≤–∫–∏"""
    details_str = ", ".join(f"{k}={v}" for k, v in details.items())
    logger.info(f"üìã Order #{order_id}: {event} [{details_str}]")


def log_api_call(logger, service: str, endpoint: str, duration_ms: float, status: str = "success"):
    """–õ–æ–≥–∏—Ä—É–µ—Ç API –≤—ã–∑–æ–≤"""
    if status == "success":
        logger.info(f"üåê API {service}/{endpoint}: {duration_ms:.0f}ms ‚úÖ")
    else:
        logger.error(f"üåê API {service}/{endpoint}: {duration_ms:.0f}ms ‚ùå {status}")


def log_db_query(logger, query_type: str, table: str, duration_ms: float, rows: int = None):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –ë–î"""
    rows_str = f", rows={rows}" if rows is not None else ""
    
    if duration_ms > 100:
        logger.warning(f"üóÑÔ∏è DB {query_type} {table}: {duration_ms:.0f}ms{rows_str} (SLOW)")
    else:
        logger.debug(f"üóÑÔ∏è DB {query_type} {table}: {duration_ms:.0f}ms{rows_str}")

