"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞–º–∏
–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∫—É—Ä—Å–æ–≤ –∏–∑ Rapira + Grinex —Å –Ω–∞—Ü–µ–Ω–∫–∞–º–∏
"""

import logging
from typing import List, Optional, Dict
from src.services.best_rate import get_best_city_rate
from src.db import get_pg_pool

logger = logging.getLogger(__name__)


async def get_available_pairs() -> List[str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
    –ë–µ—Ä–µ—Ç—Å—è –∏–∑ fx_source_pair (–µ–¥–∏–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∞–≤–¥—ã)
    """
    pool = await get_pg_pool()
    async with pool.acquire() as conn:
        rows = await conn.fetch("""
            SELECT DISTINCT internal_symbol
            FROM fx_source_pair
            WHERE enabled = true
            ORDER BY internal_symbol
        """)
    return [row['internal_symbol'] for row in rows]


async def get_client_rates(city: str) -> Dict[str, Dict]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ —Å —É—á–µ—Ç–æ–º –µ–≥–æ –≥–æ—Ä–æ–¥–∞ (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
    
    Args:
        city: –ö–æ–¥ –≥–æ—Ä–æ–¥–∞ (moscow, rostov –∏ —Ç.–¥.)
        
    Returns:
        {
            'USDT/RUB': {
                'buy': {'rate': 82.63, 'source': 'rapira'},
                'sell': {'rate': 82.57, 'source': 'rapira'}
            },
            'BTC/USDT': {...}
        }
    """
    from src.services.rapira_simple import get_rapira_simple_client
    from decimal import Decimal
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞—Ä—ã
    pairs = await get_available_pairs()
    if not pairs:
        return {}
    
    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä –ò–ó RAPIRA –û–î–ò–ù –†–ê–ó
    client = await get_rapira_simple_client()
    base_rates = await client.get_multiple_rates(pairs)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Ü–µ–Ω–∫–∏ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä –û–î–ù–ò–ú –ó–ê–ü–†–û–°–û–ú
    pool = await get_pg_pool()
    async with pool.acquire() as conn:
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –Ω–∞—Ü–µ–Ω–∫—É –≥–æ—Ä–æ–¥–∞ (—Ä–∞–∑–¥–µ–ª—å–Ω–æ –Ω–∞ buy/sell)
        city_data = await conn.fetchrow("""
            SELECT id, name, markup_buy, markup_sell, markup_fixed
            FROM cities
            WHERE code = $1 AND enabled = true
        """, city)
        
        if not city_data:
            logger.warning(f"City {city} not found")
            return {}
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Ü–µ–Ω–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä
        pair_markups = await conn.fetch("""
            SELECT pair_symbol, markup_buy, markup_sell, markup_fixed
            FROM city_pair_markups
            WHERE city_id = $1 AND enabled = true
        """, city_data['id'])
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –Ω–∞—Ü–µ–Ω–æ–∫ –ø–æ –ø–∞—Ä–∞–º
        markups_dict = {pm['pair_symbol']: pm for pm in pair_markups}
    
    result = {}
    
    for pair in pairs:
        base_rate_data = base_rates.get(pair)
        if not base_rate_data:
            continue
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Ü–µ–Ω–∫–∏ –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã (—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∏–ª–∏ –±–∞–∑–æ–≤—ã–µ)
        if pair in markups_dict:
            markup_buy = float(markups_dict[pair]['markup_buy'])
            markup_sell = float(markups_dict[pair]['markup_sell'])
            markup_fixed = float(markups_dict[pair]['markup_fixed'])
        else:
            markup_buy = float(city_data['markup_buy'])
            markup_sell = float(city_data['markup_sell'])
            markup_fixed = float(city_data['markup_fixed'])
        
        # –ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏ (ask) - –∫–ª–∏–µ–Ω—Ç –ø–æ–∫—É–ø–∞–µ—Ç –∫—Ä–∏–ø—Ç—É
        if base_rate_data.get('best_ask'):
            buy_base = float(base_rate_data['best_ask'])
            buy_final = buy_base * (1 + markup_buy / 100) + markup_fixed
            buy_final = round(buy_final, 2)
        else:
            buy_base = None
            buy_final = None
        
        # –ö—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏ (bid) - –∫–ª–∏–µ–Ω—Ç –ø—Ä–æ–¥–∞–µ—Ç –∫—Ä–∏–ø—Ç—É
        if base_rate_data.get('best_bid'):
            sell_base = float(base_rate_data['best_bid'])
            sell_final = sell_base * (1 + markup_sell / 100) + markup_fixed
            sell_final = round(sell_final, 2)
        else:
            sell_base = None
            sell_final = None
        
        result[pair] = {
            'buy': {
                'rate': buy_final,
                'base_rate': buy_base,
                'source': 'rapira',
                'markup': markup_buy
            },
            'sell': {
                'rate': sell_final,
                'base_rate': sell_base,
                'source': 'rapira',
                'markup': markup_sell
            }
        }
    
    return result


async def format_rates_for_display(city: str, city_name: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫—É—Ä—Å—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É
    
    Args:
        city: –ö–æ–¥ –≥–æ—Ä–æ–¥–∞
        city_name: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∫—É—Ä—Å–∞–º–∏
    """
    rates = await get_client_rates(city)
    
    if not rates:
        return "–ö—É—Ä—Å—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    from datetime import datetime
    text = f"üí± **–ö—É—Ä—Å—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city_name}**\n\n"
    
    for pair, rate_data in rates.items():
        text += f"**{pair}:**\n"
        
        buy_rate = rate_data.get('buy', {})
        sell_rate = rate_data.get('sell', {})
        
        if buy_rate.get('rate'):
            text += f"  –ü–æ–∫—É–ø–∫–∞: {buy_rate['rate']:.2f} ‚ÇΩ\n"
        else:
            text += f"  –ü–æ–∫—É–ø–∫–∞: _–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω_\n"
        
        if sell_rate.get('rate'):
            text += f"  –ü—Ä–æ–¥–∞–∂–∞: {sell_rate['rate']:.2f} ‚ÇΩ\n"
        else:
            text += f"  –ü—Ä–æ–¥–∞–∂–∞: _–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω_\n"
        
        text += "\n"
    
    text += f"_–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M')}_\n"
    text += f"_–ö—É—Ä—Å—ã —É–∫–∞–∑–∞–Ω—ã –¥–ª—è –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞_"
    
    return text


async def get_rate_for_order(pair: str, city: str, operation: str = "buy") -> Optional[Dict]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
    
    Args:
        pair: –ü–∞—Ä–∞ (USDT/RUB)
        city: –ì–æ—Ä–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞
        operation: buy –∏–ª–∏ sell
        
    Returns:
        {
            'rate': 82.63,
            'base_rate': 81.81,
            'source': 'rapira',
            'markup': 1.0,
            'city': 'rostov',
            'city_name': '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É'
        }
    """
    rate_info = await get_best_city_rate(pair, city, operation)
    
    if not rate_info:
        return None
    
    return {
        'rate': rate_info['final_rate'],
        'base_rate': rate_info['base_rate'],
        'source': rate_info['best_source'],
        'markup': rate_info['markup_percent'],
        'city': rate_info['city'],
        'city_name': rate_info['city_name']
    }

