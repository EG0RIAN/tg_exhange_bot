"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞–º–∏
–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∫—É—Ä—Å–æ–≤ –∏–∑ Rapira + Grinex —Å –Ω–∞—Ü–µ–Ω–∫–∞–º–∏
"""

import logging
from typing import List, Optional, Dict
from src.services.best_rate import get_best_city_rate
from src.db import get_pg_pool

logger = logging.getLogger(__name__)


async def get_available_pairs() -> List[str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
    –ë–µ—Ä–µ—Ç—Å—è –∏–∑ fx_source_pair (–µ–¥–∏–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∞–≤–¥—ã)
    """
    pool = await get_pg_pool()
    async with pool.acquire() as conn:
        rows = await conn.fetch("""
            SELECT DISTINCT internal_symbol
            FROM fx_source_pair
            WHERE enabled = true
            ORDER BY internal_symbol
        """)
    return [row['internal_symbol'] for row in rows]


async def get_client_rates(city: str) -> Dict[str, Dict]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ —Å —É—á–µ—Ç–æ–º –µ–≥–æ –≥–æ—Ä–æ–¥–∞
    
    Args:
        city: –ö–æ–¥ –≥–æ—Ä–æ–¥–∞ (moscow, rostov –∏ —Ç.–¥.)
        
    Returns:
        {
            'USDT/RUB': {
                'buy': {'rate': 82.63, 'source': 'rapira'},
                'sell': {'rate': 82.57, 'source': 'rapira'}
            },
            'BTC/USDT': {...}
        }
    """
    pairs = await get_available_pairs()
    result = {}
    
    for pair in pairs:
        try:
            # –ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏
            buy_rate = await get_best_city_rate(pair, city, "buy")
            # –ö—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏
            sell_rate = await get_best_city_rate(pair, city, "sell")
            
            if buy_rate and sell_rate:
                result[pair] = {
                    'buy': {
                        'rate': buy_rate['final_rate'],
                        'base_rate': buy_rate['base_rate'],
                        'source': buy_rate['best_source'],
                        'markup': buy_rate['markup_percent']
                    },
                    'sell': {
                        'rate': sell_rate['final_rate'],
                        'base_rate': sell_rate['base_rate'],
                        'source': sell_rate['best_source'],
                        'markup': sell_rate['markup_percent']
                    }
                }
        except Exception as e:
            logger.error(f"Failed to get rates for {pair} in city {city}: {e}")
            result[pair] = {
                'buy': {'rate': None, 'error': str(e)},
                'sell': {'rate': None, 'error': str(e)}
            }
    
    return result


async def format_rates_for_display(city: str, city_name: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫—É—Ä—Å—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É
    
    Args:
        city: –ö–æ–¥ –≥–æ—Ä–æ–¥–∞
        city_name: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∫—É—Ä—Å–∞–º–∏
    """
    rates = await get_client_rates(city)
    
    if not rates:
        return "–ö—É—Ä—Å—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    from datetime import datetime
    text = f"üí± **–ö—É—Ä—Å—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city_name}**\n\n"
    
    for pair, rate_data in rates.items():
        text += f"**{pair}:**\n"
        
        buy_rate = rate_data.get('buy', {})
        sell_rate = rate_data.get('sell', {})
        
        if buy_rate.get('rate'):
            text += f"  –ü–æ–∫—É–ø–∫–∞: {buy_rate['rate']:.2f} ‚ÇΩ\n"
        else:
            text += f"  –ü–æ–∫—É–ø–∫–∞: _–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω_\n"
        
        if sell_rate.get('rate'):
            text += f"  –ü—Ä–æ–¥–∞–∂–∞: {sell_rate['rate']:.2f} ‚ÇΩ\n"
        else:
            text += f"  –ü—Ä–æ–¥–∞–∂–∞: _–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω_\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –ª—É—á—à–µ–≥–æ –∫—É—Ä—Å–∞
        source = buy_rate.get('source', 'unknown').upper()
        text += f"  _–ò—Å—Ç–æ—á–Ω–∏–∫: {source}_\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Ü–µ–Ω–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        markup = buy_rate.get('markup', 0)
        if markup > 0:
            text += f"  _–ù–∞—Ü–µ–Ω–∫–∞ –≥–æ—Ä–æ–¥–∞: +{markup}%_\n"
        
        text += "\n"
    
    text += f"_–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M')}_\n"
    text += f"_–ö—É—Ä—Å—ã —É–∫–∞–∑–∞–Ω—ã –¥–ª—è –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞_"
    
    return text


async def get_rate_for_order(pair: str, city: str, operation: str = "buy") -> Optional[Dict]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
    
    Args:
        pair: –ü–∞—Ä–∞ (USDT/RUB)
        city: –ì–æ—Ä–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞
        operation: buy –∏–ª–∏ sell
        
    Returns:
        {
            'rate': 82.63,
            'base_rate': 81.81,
            'source': 'rapira',
            'markup': 1.0,
            'city': 'rostov',
            'city_name': '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É'
        }
    """
    rate_info = await get_best_city_rate(pair, city, operation)
    
    if not rate_info:
        return None
    
    return {
        'rate': rate_info['final_rate'],
        'base_rate': rate_info['base_rate'],
        'source': rate_info['best_source'],
        'markup': rate_info['markup_percent'],
        'city': rate_info['city'],
        'city_name': rate_info['city_name']
    }

