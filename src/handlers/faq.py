from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from src.keyboards import get_faq_categories_keyboard, get_faq_questions_keyboard, get_faq_answer_keyboard
from src.services.faq import get_categories, get_questions, get_answer

router = Router()

# –°—Ç–µ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ FAQ
FAQ_STACK = {}

@router.message(F.text == "üìñ FAQ")
async def faq_start(message: Message, state: FSMContext):
    categories = await get_categories()
    if not categories:
        await message.answer("FAQ –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    FAQ_STACK[message.from_user.id] = ["categories"]
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_faq_categories_keyboard(categories))

@router.callback_query(F.data.startswith("faq_cat:"))
async def faq_category(callback: CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split(":", 1)[1])
    questions = await get_questions(category_id)
    
    if not questions:
        await callback.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.", show_alert=True)
        return
    
    user_id = callback.from_user.id
    if user_id not in FAQ_STACK:
        FAQ_STACK[user_id] = []
    FAQ_STACK[user_id].append(f"category:{category_id}")
    
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:", reply_markup=get_faq_questions_keyboard(questions))

@router.callback_query(F.data.startswith("faq_q:"))
async def faq_question(callback: CallbackQuery, state: FSMContext):
    question_id = int(callback.data.split(":", 1)[1])
    answer_data = await get_answer(question_id)
    
    if not answer_data:
        await callback.answer("–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    
    user_id = callback.from_user.id
    if user_id not in FAQ_STACK:
        FAQ_STACK[user_id] = []
    FAQ_STACK[user_id].append(f"question:{question_id}")
    
    await callback.message.edit_text(
        f"**–í–æ–ø—Ä–æ—Å:** {answer_data['question']}\n\n**–û—Ç–≤–µ—Ç:** {answer_data['answer']}", 
        reply_markup=get_faq_answer_keyboard(),
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "faq_back")
async def faq_back(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if user_id not in FAQ_STACK or not FAQ_STACK[user_id]:
        await callback.message.edit_text("FAQ –∑–∞–∫—Ä—ã—Ç.")
        return
    
    # –£–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
    FAQ_STACK[user_id].pop()
    
    if not FAQ_STACK[user_id]:
        # –í–µ—Ä–Ω—É–ª–∏—Å—å –∫ –Ω–∞—á–∞–ª—É - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = await get_categories()
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", 
                                       reply_markup=get_faq_categories_keyboard(categories))
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
    prev_level = FAQ_STACK[user_id][-1]
    
    if prev_level.startswith("category:"):
        category_id = int(prev_level.split(":", 1)[1])
        questions = await get_questions(category_id)
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:", 
                                       reply_markup=get_faq_questions_keyboard(questions))
    else:
        # –í–µ—Ä–Ω—É–ª–∏—Å—å –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = await get_categories()
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", 
                                       reply_markup=get_faq_categories_keyboard(categories)) 