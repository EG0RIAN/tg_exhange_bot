"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—É—Ç–∏ "–ö—É–ø–∏—Ç—å USDT"
–ö–ª–∏–µ–Ω—Ç –ø–æ–∫—É–ø–∞–µ—Ç USDT –∑–∞ –Ω–∞–ª–∏—á–Ω—ã–µ
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter, Command

from src.fsm import BuyUSDTStates
from src.keyboards import (
    get_priority_cities_keyboard,
    get_all_cities_keyboard,
    get_currencies_keyboard,
    get_amount_keyboard_v2,
    get_confirm_keyboard_v2,
    get_rate_confirm_keyboard,
    main_menu
)
from src.db import get_pg_pool
import logging
from src.utils.logger import log_handler, log_user_action, log_order_event

router = Router()
logger = logging.getLogger(__name__)

# –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
MANAGER_USERNAME = "@btc_otc"


# ============================================================================
# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /start –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
# ============================================================================

@router.message(Command("start"), StateFilter(BuyUSDTStates))
async def reset_to_start(message: Message, state: FSMContext):
    """–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    from src.i18n import _, detect_user_lang
    pool = await get_pg_pool()
    lang = await detect_user_lang(message.from_user, db_pool=pool)
    await message.answer(_("start_message", lang=lang), reply_markup=main_menu)


# ============================================================================
# –®–∞–≥ 1: –ù–∞—á–∞–ª–æ - –∫–Ω–æ–ø–∫–∞ "üíµ –ö—É–ø–∏—Ç—å USDT" - –í–≤–æ–¥ —Å—É–º–º—ã
# ============================================================================

@router.message(F.text == "üíµ –ö—É–ø–∏—Ç—å USDT")
@log_handler("start_buy_usdt")
async def start_buy_usdt(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—É—Ç–∏ –ø–æ–∫—É–ø–∫–∏ USDT - –≤–≤–æ–¥ —Å—É–º–º—ã"""
    log_user_action(logger, message.from_user.id, "started buy USDT flow")
    await state.clear()
    await state.set_state(BuyUSDTStates.enter_amount)
    
    await message.answer(
        "üí∞ <b>–í–≤–µ–¥–∏—Ç–µ –°—É–º–º—É USDT:</b>\n\n"
        "(–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ 2500 Usdt)",
        reply_markup=get_amount_keyboard_v2(),
        parse_mode="HTML"
    )


# ============================================================================
# –®–∞–≥ 2: –í–≤–æ–¥ —Å—É–º–º—ã
# ============================================================================

@router.callback_query(BuyUSDTStates.enter_amount, F.data == "back")
async def back_from_amount(callback: CallbackQuery, state: FSMContext):
    """–ù–∞–∑–∞–¥ –∏–∑ –≤–≤–æ–¥–∞ —Å—É–º–º—ã - –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    from src.i18n import _, detect_user_lang
    pool = await get_pg_pool()
    lang = await detect_user_lang(callback.from_user, db_pool=pool)
    await callback.message.edit_text(_("start_message", lang=lang))
    await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)
    await callback.answer()


@router.message(BuyUSDTStates.enter_amount, F.text)
@log_handler("enter_amount")
async def enter_custom_amount(message: Message, state: FSMContext):
    """–í–≤–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Å—É–º–º—ã"""
    try:
        amount = float(message.text.replace(',', '.'))
        if amount <= 0:
            logger.warning(f"User {message.from_user.id} entered invalid amount: {amount}")
            await message.answer("‚ö†Ô∏è –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã
        if amount < 2500:
            logger.warning(f"User {message.from_user.id} entered amount below minimum: {amount}")
            await message.answer(
                "‚ö†Ô∏è <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –∑–∞—è–≤–∫–∏: 2500 USDT</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–µ –º–µ–Ω–µ–µ 2500 USDT:",
                parse_mode="HTML"
            )
            return
        
        log_user_action(logger, message.from_user.id, "entered amount", amount=amount)
        await state.update_data(amount=str(amount))
        await state.set_state(BuyUSDTStates.choose_city)
        
        await message.answer(
            f"‚úÖ –°—É–º–º–∞: ${amount}\n\n"
            "üèô <b>–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:</b>",
            reply_markup=await get_priority_cities_keyboard(),
            parse_mode="HTML"
        )
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 100.5):")


# ============================================================================
# –®–∞–≥ 3: –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
# ============================================================================

@router.callback_query(BuyUSDTStates.choose_city, F.data == "city:other")
async def show_all_cities(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≥–æ—Ä–æ–¥–∞"""
    await callback.message.edit_text(
        "üåç <b>–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:</b>",
        reply_markup=await get_all_cities_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(BuyUSDTStates.choose_city, F.data == "back_to_priority_cities")
async def back_to_priority_cities(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–º –≥–æ—Ä–æ–¥–∞–º"""
    await callback.message.edit_text(
        "üèô <b>–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:</b>",
        reply_markup=await get_priority_cities_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(BuyUSDTStates.choose_city, F.data == "back")
async def back_from_city(callback: CallbackQuery, state: FSMContext):
    """–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å—É–º–º—ã"""
    await state.set_state(BuyUSDTStates.enter_amount)
    
    await callback.message.edit_text(
        "üí∞ <b>–í–≤–µ–¥–∏—Ç–µ –°—É–º–º—É USDT:</b>\n\n"
        "(–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ 2500 Usdt)",
        reply_markup=get_amount_keyboard_v2(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(BuyUSDTStates.choose_city, F.data.startswith("city:"))
@log_handler("choose_city")
async def choose_city(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞"""
    city_code = callback.data.split(":", 1)[1]
    
    if city_code == "other":
        return  # –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—ã—à–µ
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ –ë–î
    pool = await get_pg_pool()
    async with pool.acquire() as conn:
        city_row = await conn.fetchrow(
            "SELECT name FROM cities WHERE code = $1 AND enabled = true",
            city_code
        )
    
    if not city_row:
        logger.warning(f"User {callback.from_user.id} selected invalid city: {city_code}")
        await callback.answer("‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    city_name = city_row['name']
    log_user_action(logger, callback.from_user.id, "chose city", city=city_name, code=city_code)
    
    await state.update_data(city=city_code, city_name=city_name)
    await state.set_state(BuyUSDTStates.confirm_rate)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫—É—Ä—Å–∞
    data = await state.get_data()
    amount = float(data.get('amount', 0))
    
    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å USDT/RUB –¥–ª—è –ø–æ–∫—É–ø–∫–∏
    from src.services.best_rate import get_best_city_rate
    
    rate_info = await get_best_city_rate('USDT/RUB', city_code, 'buy')
    
    if rate_info:
        rate = rate_info['final_rate']
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ —Ä—É–±–ª–µ–π –Ω—É–∂–Ω–æ –æ—Ç–¥–∞—Ç—å –∑–∞ USDT
        rub_amount = amount * rate
        
        rate_text = (
            f"‚úÖ –ì–æ—Ä–æ–¥: {city_name}\n"
            f"üí∞ –°—É–º–º–∞: {amount:,.0f} USDT\n\n"
            f"üìä <b>–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å:</b>\n"
            f"1 USDT = {rate:,.2f} RUB\n\n"
            f"üíµ <b>–ö –æ–ø–ª–∞—Ç–µ:</b> {rub_amount:,.2f} RUB\n\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∫—É—Ä—Å?"
        )
    else:
        # Fallback –µ—Å–ª–∏ –∫—É—Ä—Å –Ω–µ –ø–æ–ª—É—á–µ–Ω
        rate_text = (
            f"‚úÖ –ì–æ—Ä–æ–¥: {city_name}\n"
            f"üí∞ –°—É–º–º–∞: {amount:,.0f} USDT\n\n"
            "‚ö†Ô∏è <b>–ö—É—Ä—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏?"
        )
    
    await callback.message.edit_text(
        rate_text,
        reply_markup=get_rate_confirm_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


# ============================================================================
# –®–∞–≥ 3.5: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫—É—Ä—Å–∞
# ============================================================================

@router.callback_query(BuyUSDTStates.confirm_rate, F.data == "back")
async def back_from_rate_confirm(callback: CallbackQuery, state: FSMContext):
    """–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞"""
    await state.set_state(BuyUSDTStates.choose_city)
    
    await callback.message.edit_text(
        "üèô <b>–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:</b>",
        reply_markup=await get_priority_cities_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(BuyUSDTStates.confirm_rate, F.data == "rate:confirm")
async def confirm_rate(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫—É—Ä—Å–∞ - –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –≤–∞–ª—é—Ç—ã"""
    await state.set_state(BuyUSDTStates.choose_currency)
    
    data = await state.get_data()
    city_code = data.get('city')
    city_name = data.get('city_name')
    
    await callback.message.edit_text(
        f"‚úÖ –ì–æ—Ä–æ–¥: {city_name}\n\n"
        "üí± <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>",
        reply_markup=get_currencies_keyboard(city_code),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(BuyUSDTStates.confirm_rate, F.data == "rate:cancel")
async def cancel_rate(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –∫—É—Ä—Å–∞ - –≤–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞"""
    await state.set_state(BuyUSDTStates.choose_city)
    
    await callback.message.edit_text(
        "üèô <b>–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:</b>",
        reply_markup=await get_priority_cities_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer("–ö—É—Ä—Å –æ—Ç–º–µ–Ω–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥.")


# ============================================================================
# –®–∞–≥ 4: –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã
# ============================================================================

@router.callback_query(BuyUSDTStates.choose_currency, F.data == "back")
async def back_from_currency(callback: CallbackQuery, state: FSMContext):
    """–ù–∞–∑–∞–¥ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –∫—É—Ä—Å–∞"""
    await state.set_state(BuyUSDTStates.confirm_rate)
    
    data = await state.get_data()
    amount = float(data.get('amount', 0))
    city_code = data.get('city')
    city_name = data.get('city_name')
    
    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å USDT/RUB –¥–ª—è –ø–æ–∫—É–ø–∫–∏
    from src.services.best_rate import get_best_city_rate
    
    rate_info = await get_best_city_rate('USDT/RUB', city_code, 'buy')
    
    if rate_info:
        rate = rate_info['final_rate']
        rub_amount = amount * rate
        
        rate_text = (
            f"‚úÖ –ì–æ—Ä–æ–¥: {city_name}\n"
            f"üí∞ –°—É–º–º–∞: {amount:,.0f} USDT\n\n"
            f"üìä <b>–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å:</b>\n"
            f"1 USDT = {rate:,.2f} RUB\n\n"
            f"üíµ <b>–ö –æ–ø–ª–∞—Ç–µ:</b> {rub_amount:,.2f} RUB\n\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∫—É—Ä—Å?"
        )
    else:
        rate_text = (
            f"‚úÖ –ì–æ—Ä–æ–¥: {city_name}\n"
            f"üí∞ –°—É–º–º–∞: {amount:,.0f} USDT\n\n"
            "‚ö†Ô∏è <b>–ö—É—Ä—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏?"
        )
    
    await callback.message.edit_text(
        rate_text,
        reply_markup=get_rate_confirm_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(BuyUSDTStates.choose_currency, F.data.startswith("currency:"))
async def choose_currency(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã"""
    currency = callback.data.split(":", 1)[1]
    
    await state.update_data(currency=currency)
    await state.set_state(BuyUSDTStates.enter_username)
    
    data = await state.get_data()
    
    await callback.message.edit_text(
        f"‚úÖ –í–∞–ª—é—Ç–∞: {currency}\n\n"
        "üë§ <b>–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º-—é–∑–µ—Ä–Ω–µ–π–º —á–µ—Ä–µ–∑ @:</b>\n"
        "(–ø—Ä–∏–º–µ—Ä: @btc_otc)",
        parse_mode="HTML"
    )
    await callback.answer()


# ============================================================================
# –®–∞–≥ 5: –í–≤–æ–¥ username
# ============================================================================

@router.message(BuyUSDTStates.enter_username, F.text)
@log_handler("enter_username")
async def enter_username(message: Message, state: FSMContext):
    """–í–≤–æ–¥ username"""
    username = message.text.strip()
    log_user_action(logger, message.from_user.id, "entered username", username=username)
    
    await state.update_data(username=username)
    await state.set_state(BuyUSDTStates.attach_photo)
    
    await message.answer(
        "üì∏ <b>–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç:</b>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: —á–µ–∫, –∫–≤–∏—Ç–∞–Ω—Ü–∏—é –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç\n\n"
        "üí° –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ /skip",
        parse_mode="HTML"
    )


# ============================================================================
# –®–∞–≥ 6: –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç–∞
# ============================================================================

@router.message(BuyUSDTStates.attach_photo, F.document | F.photo)
@log_handler("attach_photo")
async def attach_photo_file(message: Message, state: FSMContext):
    """–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    log_user_action(logger, message.from_user.id, "attaching photo")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –∏ —Ç–∏–ø
    if message.document:
        file_id = message.document.file_id
        file_type = "document"
    elif message.photo:
        file_id = message.photo[-1].file_id
        file_type = "photo"
    else:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ —Ñ–æ—Ç–æ.")
        return
    
    await state.update_data(photo_file_id=file_id, photo_file_type=file_type)
    await show_confirmation(message, state)


@router.message(BuyUSDTStates.attach_photo, Command("skip"))
@log_handler("skip_photo")
async def skip_photo(message: Message, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ"""
    log_user_action(logger, message.from_user.id, "skipped photo")
    await show_confirmation(message, state)


async def show_confirmation(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    await state.set_state(BuyUSDTStates.confirm)
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    from src.services.best_rate import get_best_city_rate
    
    amount = float(data.get('amount', 0))
    city = data.get('city', 'moscow')
    currency = data.get('currency', 'RUB')
    
    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å USDT/RUB –¥–ª—è –ø–æ–∫—É–ø–∫–∏
    rate_info = await get_best_city_rate('USDT/RUB', city, 'buy')
    
    if rate_info:
        rate = rate_info['final_rate']
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ —Ä—É–±–ª–µ–π –Ω—É–∂–Ω–æ –æ—Ç–¥–∞—Ç—å –∑–∞ USDT
        rub_amount = amount * rate
        
        summary = (
            f"üìã <b>–ó–∞—è–≤–∫–∞ #{message.from_user.id}</b>\n\n"
            f"üîÑ –û–ø–µ—Ä–∞—Ü–∏—è: <b>–ü–æ–∫—É–ø–∫–∞ USDT</b>\n"
            f"üí∞ –û—Ç–¥–∞–µ—Ç–µ: {rub_amount:,.2f} {currency}\n"
            f"üíé –ü–æ–ª—É—á–∞–µ—Ç–µ: {amount:,.0f} USDT\n"
            f"üìä –ö—É—Ä—Å: 1 USDT = {rate:,.2f} {currency}\n"
            f"üèô –ì–æ—Ä–æ–¥: {data.get('city_name', 'N/A')}\n"
            f"üë§ Username: {username}\n\n"
            "–í—Å—ë –≤–µ—Ä–Ω–æ?"
        )
    else:
        # Fallback –µ—Å–ª–∏ –∫—É—Ä—Å –Ω–µ –ø–æ–ª—É—á–µ–Ω
        summary = (
            "üìã <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –∑–∞—è–≤–∫—É:</b>\n\n"
            f"üîÑ –û–ø–µ—Ä–∞—Ü–∏—è: <b>–ü–æ–∫—É–ø–∫–∞ USDT</b>\n"
            f"üíé –ü–æ–ª—É—á–∞–µ—Ç–µ: {amount:,.0f} USDT\n"
            f"üèô –ì–æ—Ä–æ–¥: {data.get('city_name', 'N/A')}\n"
            f"üí± –í–∞–ª—é—Ç–∞: {data.get('currency', 'N/A')}\n"
            f"üë§ Username: {username}\n\n"
            "–í—Å—ë –≤–µ—Ä–Ω–æ?"
        )
    
    await message.answer(
        summary,
        reply_markup=get_confirm_keyboard_v2(),
        parse_mode="HTML"
    )


# ============================================================================
# –®–∞–≥ 6: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
# ============================================================================

@router.callback_query(BuyUSDTStates.confirm, F.data == "back")
async def back_from_confirm(callback: CallbackQuery, state: FSMContext):
    """–ù–∞–∑–∞–¥ –∫ –≤–≤–æ–¥—É username"""
    await state.set_state(BuyUSDTStates.enter_username)
    data = await state.get_data()
    
    await callback.message.edit_text(
        f"‚úÖ –í–∞–ª—é—Ç–∞: {data.get('currency', 'N/A')}\n\n"
        "üë§ <b>–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º-—é–∑–µ—Ä–Ω–µ–π–º —á–µ—Ä–µ–∑ @:</b>\n"
        "(–ø—Ä–∏–º–µ—Ä: @btc_otc)",
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(BuyUSDTStates.confirm, F.data == "confirm:yes")
@log_handler("confirm_order")
async def confirm_order(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    data = await state.get_data()
    log_user_action(
        logger, callback.from_user.id, "confirming buy order",
        amount=data.get('amount'),
        city=data.get('city'),
        currency=data.get('currency')
    )
    
    pool = await get_pg_pool()
    async with pool.acquire() as conn:
        # –°–Ω–∞—á–∞–ª–∞ —É–±–µ–¥–∏–º—Å—è —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –ë–î –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ id
        user_id = await conn.fetchval("""
            INSERT INTO users (tg_id, username, first_name, lang)
            VALUES ($1, $2, $3, $4)
            ON CONFLICT (tg_id) DO UPDATE SET username = EXCLUDED.username
            RETURNING id
        """, 
            callback.from_user.id,
            callback.from_user.username,
            callback.from_user.first_name,
            callback.from_user.language_code or 'ru'
        )
        
        # –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º user_id
        order_id = await conn.fetchval("""
            INSERT INTO orders (
                user_id, 
                order_type, 
                city, 
                currency, 
                amount, 
                status, 
                username,
                photo_file_id,
                photo_file_type
            )
            VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
            RETURNING id
        """,
            user_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
            'buy_usdt',
            data.get('city'),
            data.get('currency'),
            float(data.get('amount', 0)),
            'new',
            data.get('username'),
            data.get('photo_file_id'),
            data.get('photo_file_type')
        )
    
    await state.clear()
    
    log_order_event(
        logger, order_id, "created",
        type="buy_usdt",
        user_id=callback.from_user.id,
        amount=data.get('amount'),
        city=data.get('city')
    )
    
    await callback.message.edit_text(
        f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{order_id} –ø—Ä–∏–Ω—è—Ç–∞!\n\n"
        f"–°–∫–æ—Ä–æ –ø—Ä–∏—à–ª–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –í–∞—à–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!"
    )
    
    await callback.answer()


@router.callback_query(BuyUSDTStates.confirm, F.data == "confirm:edit")
async def edit_order(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    await state.set_state(BuyUSDTStates.enter_amount)
    await callback.message.edit_text(
        "üîÑ –ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ.\n\n"
        "üí∞ <b>–í–≤–µ–¥–∏—Ç–µ –°—É–º–º—É USDT:</b>\n\n"
        "(–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ 2500 Usdt)",
        reply_markup=get_amount_keyboard_v2(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(BuyUSDTStates.confirm, F.data == "confirm:cancel")
async def cancel_order(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        parse_mode="HTML"
    )
    await callback.answer()


# ============================================================================
# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º" –¥–ª—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
# ============================================================================

async def handle_contact_manager(callback: CallbackQuery):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"""
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    contact_message = (
        "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n\n"
        "–ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å!"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", url=f"https://t.me/{MANAGER_USERNAME[1:]}")],
    ])
    
    await callback.message.answer(
        contact_message,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(StateFilter(BuyUSDTStates), F.data == "contact_manager")
async def contact_manager_in_state(callback: CallbackQuery, state: FSMContext):
    """–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM"""
    await handle_contact_manager(callback)


@router.callback_query(F.data == "contact_manager")
async def contact_manager_no_state(callback: CallbackQuery):
    """–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –≤–Ω–µ FSM"""
    await handle_contact_manager(callback)


# ============================================================================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–ª–ª–±—ç–∫–æ–≤ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
# ============================================================================

@router.callback_query(BuyUSDTStates.enter_amount)
async def handle_unknown_enter_amount(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ enter_amount"""
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º callback –æ—Ç –¥—Ä—É–≥–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    if callback.data.startswith(("city:", "currency:", "rate:", "confirm:", "back", "contact_manager")):
        return
    logger.warning(f"Unhandled callback in BuyUSDTStates.enter_amount: {callback.data}")
    await callback.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç–µ–∫—Å—Ç–æ–º", show_alert=True)


@router.callback_query(BuyUSDTStates.choose_city)
async def handle_unknown_choose_city(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ choose_city"""
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º callback –æ—Ç –¥—Ä—É–≥–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    if callback.data.startswith(("currency:", "rate:", "amount:", "confirm:", "back", "contact_manager", "rates_back")):
        return
    logger.warning(f"Unhandled callback in BuyUSDTStates.choose_city: {callback.data}")
    await callback.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞", show_alert=True)


@router.callback_query(BuyUSDTStates.confirm_rate)
async def handle_unknown_confirm_rate(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ confirm_rate"""
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º callback –æ—Ç –¥—Ä—É–≥–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    if callback.data.startswith(("city:", "currency:", "amount:", "back", "contact_manager")):
        return
    logger.warning(f"Unhandled callback in BuyUSDTStates.confirm_rate: {callback.data}")
    await callback.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –∫—É—Ä—Å", show_alert=True)


@router.callback_query(BuyUSDTStates.choose_currency)
async def handle_unknown_choose_currency(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ choose_currency"""
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º callback –æ—Ç –¥—Ä—É–≥–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    if callback.data.startswith(("city:", "rate:", "amount:", "confirm:", "back", "contact_manager")):
        return
    logger.warning(f"Unhandled callback in BuyUSDTStates.choose_currency: {callback.data}")
    await callback.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É", show_alert=True)


@router.callback_query(BuyUSDTStates.enter_username)
async def handle_unknown_enter_username(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ enter_username"""
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º callback –æ—Ç –¥—Ä—É–≥–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    if callback.data.startswith(("city:", "currency:", "rate:", "amount:", "confirm:", "back", "contact_manager")):
        return
    logger.warning(f"Unhandled callback in BuyUSDTStates.enter_username: {callback.data}")
    await callback.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ username —Ç–µ–∫—Å—Ç–æ–º", show_alert=True)


@router.callback_query(BuyUSDTStates.confirm)
async def handle_unknown_confirm_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ confirm"""
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º callback –æ—Ç –¥—Ä—É–≥–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    if callback.data.startswith(("city:", "currency:", "rate:", "amount:", "confirm:", "back", "contact_manager")):
        return
    logger.warning(f"Unhandled callback in BuyUSDTStates.confirm: {callback.data}")
    await callback.answer("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", show_alert=True)
