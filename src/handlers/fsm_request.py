from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram import Bot
from src.fsm import RequestFSM
from src.keyboards import get_cities_keyboard, get_pairs_keyboard, get_amount_keyboard, get_payout_keyboard, get_confirm_keyboard
from src.services.content import get_pairs_for_fsm, get_payout_methods_for_pair
from src.services.notifications import notify_new_order
import re
from aiogram.filters import Command
from src.db import get_pg_pool, create_order
import asyncio

MAX_AMOUNT = 1000000

PROGRESS = ["‚ñ™Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è", "‚ñ™Ô∏è‚ñ™Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è", "‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ´Ô∏è", "‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è"]

async def is_valid_amount(text):
    return re.match(r"^\d+(\.\d{1,8})?$", text) and float(text) <= MAX_AMOUNT

def is_valid_contact(text):
    return re.match(r"^\+\d{10,15}$", text) or re.match(r"^@[a-zA-Z0-9_]{5,32}$", text)

def escape_markdown(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown"""
    return text.replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace(']', '\\]').replace('(', '\\(').replace(')', '\\)').replace('~', '\\~').replace('`', '\\`').replace('>', '\\>').replace('#', '\\#').replace('+', '\\+').replace('-', '\\-').replace('=', '\\=').replace('|', '\\|').replace('{', '\\{').replace('}', '\\}').replace('.', '\\.').replace('!', '\\!')

router = Router()

# --- TIMEOUT MANAGEMENT ---
async def start_timeout(state: FSMContext, chat_id: int, bot: Bot):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–∞–π–º–∞—É—Ç–∞
    await state.update_data(timeout_start=asyncio.get_event_loop().time())

@router.message(F.text == "‚úâÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def start_request(message: Message, state: FSMContext):
    await message.answer("üåç –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:", reply_markup=await get_cities_keyboard())
    await state.set_state(RequestFSM.ChooseCity)
    await start_timeout(state, message.chat.id, message.bot)

@router.callback_query(RequestFSM.ChooseCity, F.data.startswith("city:"))
async def choose_city(callback: CallbackQuery, state: FSMContext):
    city_code = callback.data.split(":", 1)[1]
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ –ë–î
    from src.db import get_pg_pool
    pool = await get_pg_pool()
    async with pool.acquire() as conn:
        city_row = await conn.fetchrow("SELECT name FROM cities WHERE code = $1 AND enabled = true", city_code)
        city_name = city_row['name'] if city_row else city_code
    
    await state.update_data(city=city_code, city_name=city_name)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–∞—Ä—ã
    pairs = await get_pairs_for_fsm()
    if not pairs:
        await callback.message.edit_text("–¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    await callback.message.edit_text(
        f"‚úÖ –ì–æ—Ä–æ–¥: {city_name}\n\n{PROGRESS[0]}\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:",
        reply_markup=get_pairs_keyboard(pairs)
    )
    await state.set_state(RequestFSM.ChoosePair)
    await start_timeout(state, callback.message.chat.id, callback.bot)

@router.callback_query(RequestFSM.ChoosePair, F.data.startswith("pair:"))
async def choose_pair(callback: CallbackQuery, state: FSMContext):
    pair = callback.data.split(":", 1)[1]
    await state.update_data(pair=pair)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≥–æ—Ä–æ–¥–µ
    data = await state.get_data()
    city = data.get('city', 'moscow')
    city_name = data.get('city_name', '–ú–æ—Å–∫–≤–∞')
    
    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –¥–ª—è –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
    from src.services.client_rates import get_rate_for_order
    from datetime import datetime
    
    rate_info = await get_rate_for_order(pair, city, operation="buy")
    
    if rate_info:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ –¥–ª—è –∑–∞—è–≤–∫–∏
        await state.update_data(
            rate=rate_info['rate'],
            base_rate=rate_info['base_rate'],
            rate_source=rate_info['source'],
            rate_markup=rate_info['markup'],
            rate_timestamp=datetime.now().isoformat()
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—É—Ä—Å–æ–º
        rate_text = (
            f"‚úÖ –ì–æ—Ä–æ–¥: {city_name}\n"
            f"‚úÖ –ü–∞—Ä–∞: {pair}\n\n"
            f"üí∞ **–í–∞—à –∫—É—Ä—Å: {rate_info['rate']:.2f} ‚ÇΩ**\n\n"
            f"{PROGRESS[1]}\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:"
        )
    else:
        # Fallback –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å
        logger.error(f"Failed to get rate for {pair} in city {city}")
        rate_text = f"‚úÖ –ì–æ—Ä–æ–¥: {city_name}\n‚úÖ –ü–∞—Ä–∞: {pair}\n\n‚ö†Ô∏è –ö—É—Ä—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n\n{PROGRESS[1]}\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:"
    
    await callback.message.edit_text(rate_text, reply_markup=get_amount_keyboard(), parse_mode="Markdown")
    await state.set_state(RequestFSM.EnterAmount)
    await start_timeout(state, callback.message.chat.id, callback.bot)

@router.callback_query(RequestFSM.EnterAmount, F.data.startswith("amount:"))
async def choose_amount(callback: CallbackQuery, state: FSMContext):
    amount = callback.data.split(":", 1)[1]
    if amount == "custom":
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Å—É–º–º—É:")
        return
    if not await is_valid_amount(amount):
        await callback.message.answer(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–æ {MAX_AMOUNT}.")
        return
    await state.update_data(amount=amount)
    data = await state.get_data()
    methods = await get_payout_methods_for_pair(data["pair"])
    await callback.message.edit_text(f"{PROGRESS[2]}\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–ø–ª–∞—Ç—ã:", reply_markup=get_payout_keyboard(methods))
    await state.set_state(RequestFSM.SelectPayout)
    await start_timeout(state, callback.message.chat.id, callback.bot)

@router.message(RequestFSM.EnterAmount)
async def enter_custom_amount(message: Message, state: FSMContext):
    if not await is_valid_amount(message.text):
        await message.answer(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–æ {MAX_AMOUNT}.")
        return
    await state.update_data(amount=message.text)
    data = await state.get_data()
    methods = await get_payout_methods_for_pair(data["pair"])
    await message.answer(f"{PROGRESS[2]}\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–ø–ª–∞—Ç—ã:", reply_markup=get_payout_keyboard(methods))
    await state.set_state(RequestFSM.SelectPayout)
    await start_timeout(state, message.chat.id, message.bot)

@router.callback_query(RequestFSM.SelectPayout, F.data.startswith("payout:"))
async def select_payout(callback: CallbackQuery, state: FSMContext):
    payout = callback.data.split(":", 1)[1]
    await state.update_data(payout_method=payout)
    await callback.message.edit_text(f"{PROGRESS[3]}\n–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º-—é–∑–µ—Ä–Ω–µ–π–º —á–µ—Ä–µ–∑ @ (–ø—Ä–∏–º–µ—Ä: @btc_otc)")
    await state.set_state(RequestFSM.ContactInfo)
    await start_timeout(state, callback.message.chat.id, callback.bot)

@router.message(RequestFSM.ContactInfo)
async def enter_contact(message: Message, state: FSMContext):
    if not is_valid_contact(message.text):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç. –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º-—é–∑–µ—Ä–Ω–µ–π–º —á–µ—Ä–µ–∑ @ (–ø—Ä–∏–º–µ—Ä: @btc_otc)")
        return
    await state.update_data(contact=message.text)
    data = await state.get_data()
    
    city_name = data.get('city_name', '–ú–æ—Å–∫–≤–∞')
    rate = data.get('rate', 0)
    rate_source = data.get('rate_source', 'rapira')
    
    escaped_pair = escape_markdown(data['pair'])
    escaped_payout = escape_markdown(data['payout_method'])
    escaped_contact = escape_markdown(data['contact'])
    escaped_city = escape_markdown(city_name)
    
    summary = (
        f"üåç –ì–æ—Ä–æ–¥: {escaped_city}\n"
        f"üí± –ü–∞—Ä–∞: {escaped_pair}\n"
        f"üí∞ –ö—É—Ä—Å: {rate:.2f} ‚ÇΩ\n"
        f"üìä –°—É–º–º–∞: {data['amount']}\n"
        f"üí≥ –í—ã–ø–ª–∞—Ç–∞: {escaped_payout}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {escaped_contact}"
    )
    
    await message.answer(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞—è–≤–∫—É:\n\n{summary}", reply_markup=get_confirm_keyboard(), parse_mode="Markdown")
    await state.set_state(RequestFSM.Confirm)
    await start_timeout(state, message.chat.id, message.bot)

@router.callback_query(RequestFSM.Confirm, F.data == "confirm")
async def confirm_request(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    print(f"–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏: {data}")
    pool = await get_pg_pool()
    
    # –ü–æ–ª—É—á–∞–µ–º users.id –ø–æ tg_id
    async with pool.acquire() as conn:
        user = await conn.fetchrow("SELECT id FROM users WHERE tg_id = $1", callback.from_user.id)
        if not user:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            await state.clear()
            return
    
    print(f"User ID: {user['id']}, tg_id: {callback.from_user.id}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º rate_snapshot —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫—É—Ä—Å–µ
    import json
    rate_snapshot = json.dumps({
        'city': data.get('city', 'moscow'),
        'city_name': data.get('city_name', '–ú–æ—Å–∫–≤–∞'),
        'pair': data.get('pair'),
        'final_rate': data.get('rate', 0),
        'base_rate': data.get('base_rate', 0),
        'markup_percent': data.get('rate_markup', 0),
        'source': data.get('rate_source', 'rapira'),
        'timestamp': data.get('rate_timestamp')
    })
    
    try:
        order_id = await create_order(
            pool, 
            user_id=user['id'], 
            pair=data['pair'], 
            amount=data['amount'], 
            payout_method=data['payout_method'], 
            contact=data['contact'],
            rate_snapshot=rate_snapshot
        )
        print(f"–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {order_id}")
    
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
        await notify_new_order(order_id, callback.from_user.id, data['amount'], data['pair'])
    
        await callback.message.edit_text("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É!")
        await state.clear()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@router.callback_query(RequestFSM.Confirm, F.data == "cancel")
async def cancel_request(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()

@router.message(Command("cancel"))
async def cancel_any(message: Message, state: FSMContext):
    await message.answer("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()

# BACK BUTTONS ‚Äî —Ç–æ–∂–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é—Ç —Ç–∞–π–º–∞—É—Ç
@router.callback_query(RequestFSM.EnterAmount, F.data == "back")
async def back_to_pair(callback: CallbackQuery, state: FSMContext):
    pairs = await get_pairs_for_fsm()
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:", reply_markup=get_pairs_keyboard(pairs))
    await state.set_state(RequestFSM.ChoosePair)
    await start_timeout(state, callback.message.chat.id, callback.bot)

@router.callback_query(RequestFSM.SelectPayout, F.data == "back")
async def back_to_amount(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    escaped_pair = escape_markdown(data.get('pair', '?'))
    await callback.message.edit_text(f"{PROGRESS[1]}\n–ü–∞—Ä–∞ –≤—ã–±—Ä–∞–Ω–∞: {escaped_pair}\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:", reply_markup=get_amount_keyboard())
    await state.set_state(RequestFSM.EnterAmount)
    await start_timeout(state, callback.message.chat.id, callback.bot)

@router.callback_query(RequestFSM.ContactInfo, F.data == "back")
async def back_to_payout(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    methods = await get_payout_methods_for_pair(data.get("pair", ""))
    await callback.message.edit_text(f"{PROGRESS[2]}\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–ø–ª–∞—Ç—ã:", reply_markup=get_payout_keyboard(methods))
    await state.set_state(RequestFSM.SelectPayout)
    await start_timeout(state, callback.message.chat.id, callback.bot)

@router.callback_query(RequestFSM.Confirm, F.data == "back")
async def back_to_contact(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(f"{PROGRESS[3]}\n–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º-—é–∑–µ—Ä–Ω–µ–π–º —á–µ—Ä–µ–∑ @ (–ø—Ä–∏–º–µ—Ä: @btc_otc)")
    await state.set_state(RequestFSM.ContactInfo)
    await start_timeout(state, callback.message.chat.id, callback.bot) 