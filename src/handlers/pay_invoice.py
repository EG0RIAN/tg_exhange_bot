"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—É—Ç–∏ "–û–ø–ª–∞—Ç–∏—Ç—å –∏–Ω–≤–æ–π—Å"
–ö–ª–∏–µ–Ω—Ç –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç –∏–Ω–≤–æ–π—Å –Ω–∞–ª–∏—á–Ω—ã–º–∏ –∏–ª–∏ USDT
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter, Command

from src.fsm import PayInvoiceStates
from src.keyboards import (
    get_invoice_purposes_keyboard,
    get_payment_methods_keyboard,
    get_priority_cities_keyboard,
    get_all_cities_keyboard,
    get_amount_keyboard_v2,
    get_confirm_keyboard_v2,
    get_currencies_keyboard,
    main_menu
)
from src.db import get_pg_pool
import logging
from src.utils.logger import log_handler, log_user_action, log_order_event

router = Router()
logger = logging.getLogger(__name__)

MANAGER_USERNAME = "@btc_otc"


# ============================================================================
# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /start –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
# ============================================================================

@router.message(Command("start"), StateFilter(PayInvoiceStates))
async def reset_to_start(message: Message, state: FSMContext):
    """–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    from src.i18n import _, detect_user_lang
    from src.db import get_pg_pool
    pool = await get_pg_pool()
    lang = await detect_user_lang(message.from_user, db_pool=pool)
    from src.keyboards import main_menu
    await message.answer(_("start_message", lang=lang), reply_markup=main_menu)


# ============================================================================
# –®–∞–≥ 1: –í—ã–±–æ—Ä —Ü–µ–ª–∏
# ============================================================================

@router.message(F.text == "üìÑ –û–ø–ª–∞—Ç–∏—Ç—å –∏–Ω–≤–æ–π—Å")
async def start_pay_invoice(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—É—Ç–∏ –æ–ø–ª–∞—Ç—ã –∏–Ω–≤–æ–π—Å–∞"""
    await state.clear()
    await state.set_state(PayInvoiceStates.choose_purpose)
    
    await message.answer(
        "üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –æ–ø–ª–∞—Ç—ã:</b>",
        reply_markup=get_invoice_purposes_keyboard(),
        parse_mode="HTML"
    )


@router.callback_query(PayInvoiceStates.choose_purpose, F.data == "back")
async def back_from_purpose(callback: CallbackQuery, state: FSMContext):
    """–ù–∞–∑–∞–¥ –∏–∑ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏ - –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    from src.i18n import _, detect_user_lang
    pool = await get_pg_pool()
    lang = await detect_user_lang(callback.from_user, db_pool=pool)
    await callback.message.edit_text(_("start_message", lang=lang))
    await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)
    await callback.answer()


@router.callback_query(PayInvoiceStates.choose_purpose, F.data.startswith("purpose:"))
async def choose_purpose(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ü–µ–ª–∏ –∏–Ω–≤–æ–π—Å–∞"""
    purpose = callback.data.split(":", 1)[1]
    
    purpose_names = {
        "services": "üè¢ –û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥",
        "goods": "üè¨ –ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤",
        "delivery": "üì¶ –î–æ—Å—Ç–∞–≤–∫–∞/–ª–æ–≥–∏—Å—Ç–∏–∫–∞",
        "other": "üíº –ü—Ä–æ—á–µ–µ",
    }
    
    await state.update_data(purpose=purpose, purpose_name=purpose_names.get(purpose, purpose))
    await state.set_state(PayInvoiceStates.choose_payment_method)
    
    await callback.message.edit_text(
        f"‚úÖ –¶–µ–ª—å: {purpose_names.get(purpose)}\n\n"
        "üí≥ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b>",
        reply_markup=get_payment_methods_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


# ============================================================================
# –®–∞–≥ 2: –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
# ============================================================================

@router.callback_query(PayInvoiceStates.choose_payment_method, F.data == "back")
async def back_from_payment_method(callback: CallbackQuery, state: FSMContext):
    """–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ü–µ–ª–∏"""
    await state.set_state(PayInvoiceStates.choose_purpose)
    
    await callback.message.edit_text(
        "üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –æ–ø–ª–∞—Ç—ã:</b>",
        reply_markup=get_invoice_purposes_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(PayInvoiceStates.choose_payment_method, F.data.startswith("payment:"))
async def choose_payment_method(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    payment_method = callback.data.split(":", 1)[1]
    
    await state.update_data(payment_method=payment_method)
    await state.set_state(PayInvoiceStates.enter_amount)
    
    payment_text = "üíµ –ù–∞–ª–∏—á–Ω—ã–µ" if payment_method == "cash" else "üíé USDT"
    
    await callback.message.edit_text(
        f"‚úÖ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_text}\n\n"
        "üí∞ <b>–í–≤–µ–¥–∏—Ç–µ –°—É–º–º—É:</b>\n\n"
        "(–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ 2500 Usdt)",
        reply_markup=get_amount_keyboard_v2(),
        parse_mode="HTML"
    )
    await callback.answer()


# ============================================================================
# –®–∞–≥ 3: –í–≤–æ–¥ —Å—É–º–º—ã
# ============================================================================

@router.callback_query(PayInvoiceStates.enter_amount, F.data == "back")
async def back_from_amount(callback: CallbackQuery, state: FSMContext):
    """–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    await state.set_state(PayInvoiceStates.choose_payment_method)
    data = await state.get_data()
    
    await callback.message.edit_text(
        f"‚úÖ –¶–µ–ª—å: {data.get('purpose_name')}\n\n"
        "üí≥ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b>",
        reply_markup=get_payment_methods_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()




@router.message(PayInvoiceStates.enter_amount, F.text)
@log_handler("enter_amount")
async def enter_custom_amount(message: Message, state: FSMContext):
    """–í–≤–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Å—É–º–º—ã"""
    try:
        amount = float(message.text.replace(',', '.'))
        if amount <= 0:
            logger.warning(f"User {message.from_user.id} entered invalid amount: {amount}")
            await message.answer("‚ö†Ô∏è –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã
        if amount < 2500:
            logger.warning(f"User {message.from_user.id} entered amount below minimum: {amount}")
            await message.answer(
                "‚ö†Ô∏è <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –∑–∞—è–≤–∫–∏: 2500 USDT</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–µ –º–µ–Ω–µ–µ 2500 USDT:",
                parse_mode="HTML"
            )
            return
        
        log_user_action(logger, message.from_user.id, "entered amount", amount=amount)
        await state.update_data(amount=str(amount))
        data = await state.get_data()
        
        # –ï—Å–ª–∏ –Ω–∞–ª–∏—á–Ω—ã–µ - –≤—ã–±–∏—Ä–∞–µ–º –≤–∞–ª—é—Ç—É, –µ—Å–ª–∏ USDT - –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∏–Ω–≤–æ–π—Å
        if data.get('payment_method') == 'cash':
            await state.set_state(PayInvoiceStates.choose_currency)
            await message.answer(
                f"‚úÖ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: üíµ –ù–∞–ª–∏—á–Ω—ã–µ\n"
                f"‚úÖ –°—É–º–º–∞: ${amount}\n\n"
                "üí± <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:</b>",
                reply_markup=get_currencies_keyboard(),
                parse_mode="HTML"
            )
        else:
            await state.set_state(PayInvoiceStates.attach_invoice)
            await message.answer(
                f"‚úÖ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: üíé USDT\n"
                f"‚úÖ –°—É–º–º–∞: ${amount}\n\n"
                "üìé <b>–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–Ω–≤–æ–π—Å (—Ñ–∞–π–ª –∏–ª–∏ —Ñ–æ—Ç–æ):</b>",
                parse_mode="HTML"
            )
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 100.5):")


# ============================================================================
# –®–∞–≥ 4: –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–∞–ª–∏—á–Ω—ã—Ö)
# ============================================================================

@router.callback_query(PayInvoiceStates.choose_currency, F.data == "back")
async def back_from_currency(callback: CallbackQuery, state: FSMContext):
    """–ù–∞–∑–∞–¥ –∫ –≤–≤–æ–¥—É —Å—É–º–º—ã"""
    await state.set_state(PayInvoiceStates.enter_amount)
    data = await state.get_data()
    
    await callback.message.edit_text(
        f"‚úÖ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: üíµ –ù–∞–ª–∏—á–Ω—ã–µ\n\n"
        "üí∞ <b>–í–≤–µ–¥–∏—Ç–µ –°—É–º–º—É:</b>\n\n"
        "(–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ 2500 Usdt)",
        reply_markup=get_amount_keyboard_v2(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(PayInvoiceStates.choose_currency, F.data.startswith("currency:"))
async def choose_currency(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã"""
    currency = callback.data.split(":", 1)[1]
    
    await state.update_data(currency=currency)
    await state.set_state(PayInvoiceStates.choose_city)
    
    await callback.message.edit_text(
        f"‚úÖ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: üíµ –ù–∞–ª–∏—á–Ω—ã–µ\n"
        f"‚úÖ –°—É–º–º–∞: ${(await state.get_data()).get('amount')}\n"
        f"‚úÖ –í–∞–ª—é—Ç–∞: {currency}\n\n"
        "üèô <b>–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:</b>",
        reply_markup=await get_priority_cities_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


# ============================================================================
# –®–∞–≥ 5: –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–∞–ª–∏—á–Ω—ã—Ö)
# ============================================================================

@router.callback_query(PayInvoiceStates.choose_city, F.data == "city:other")
async def show_all_cities(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≥–æ—Ä–æ–¥–∞"""
    await callback.message.edit_text(
        "üåç <b>–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:</b>",
        reply_markup=await get_all_cities_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(PayInvoiceStates.choose_city, F.data == "back_to_priority_cities")
async def back_to_priority_cities(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–º –≥–æ—Ä–æ–¥–∞–º"""
    await callback.message.edit_text(
        "üèô <b>–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:</b>",
        reply_markup=await get_priority_cities_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(PayInvoiceStates.choose_city, F.data == "back")
async def back_from_city(callback: CallbackQuery, state: FSMContext):
    """–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≤–∞–ª—é—Ç—ã"""
    await state.set_state(PayInvoiceStates.choose_currency)
    data = await state.get_data()
    
    await callback.message.edit_text(
        f"‚úÖ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: üíµ –ù–∞–ª–∏—á–Ω—ã–µ\n"
        f"‚úÖ –°—É–º–º–∞: ${data.get('amount')}\n\n"
        "üí± <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:</b>",
        reply_markup=get_currencies_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(PayInvoiceStates.choose_city, F.data.startswith("city:"))
async def choose_city(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞"""
    city_code = callback.data.split(":", 1)[1]
    
    if city_code == "other":
        return  # –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—ã—à–µ
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ –ë–î
    pool = await get_pg_pool()
    async with pool.acquire() as conn:
        city_row = await conn.fetchrow(
            "SELECT name FROM cities WHERE code = $1 AND enabled = true",
            city_code
        )
    
    if not city_row:
        await callback.answer("‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    city_name = city_row['name']
    
    await state.update_data(city=city_code, city_name=city_name)
    await state.set_state(PayInvoiceStates.attach_invoice)
    
    data = await state.get_data()
    
    await callback.message.edit_text(
        f"‚úÖ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: üíµ –ù–∞–ª–∏—á–Ω—ã–µ\n"
        f"‚úÖ –°—É–º–º–∞: ${data.get('amount')}\n"
        f"‚úÖ –í–∞–ª—é—Ç–∞: {data.get('currency')}\n"
        f"‚úÖ –ì–æ—Ä–æ–¥: {city_name}\n\n"
        "üìé <b>–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–Ω–≤–æ–π—Å (—Ñ–∞–π–ª –∏–ª–∏ —Ñ–æ—Ç–æ):</b>",
        parse_mode="HTML"
    )
    await callback.answer()


# ============================================================================
# –®–∞–≥ 5: –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞
# ============================================================================

@router.message(PayInvoiceStates.attach_invoice, F.document | F.photo)
async def attach_invoice_file(message: Message, state: FSMContext):
    """–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Ñ–æ—Ç–æ –∏–Ω–≤–æ–π—Å–∞"""
    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id
    if message.document:
        file_id = message.document.file_id
    elif message.photo:
        file_id = message.photo[-1].file_id
    else:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ —Ñ–æ—Ç–æ –∏–Ω–≤–æ–π—Å–∞.")
        return
    
    await state.update_data(invoice_file_id=file_id)
    await state.set_state(PayInvoiceStates.enter_username)
    
    await message.answer(
        "‚úÖ –ò–Ω–≤–æ–π—Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω\n\n"
        "üë§ <b>–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º-—é–∑–µ—Ä–Ω–µ–π–º —á–µ—Ä–µ–∑ @:</b>\n"
        "(–ø—Ä–∏–º–µ—Ä: @btc_otc)",
        parse_mode="HTML"
    )


# ============================================================================
# –®–∞–≥ 6: –í–≤–æ–¥ username
# ============================================================================

@router.message(PayInvoiceStates.enter_username, F.text)
async def enter_username(message: Message, state: FSMContext):
    """–í–≤–æ–¥ username"""
    username = message.text.strip()
    
    await state.update_data(username=username)
    await state.set_state(PayInvoiceStates.confirm)
    
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω–∞–ª–∏—á–Ω—ã–µ)
    amount = float(data.get('amount', 0))
    currency = data.get('currency', 'RUB')
    
    if data.get('payment_method') == 'cash':
        # –î–ª—è –Ω–∞–ª–∏—á–Ω—ã—Ö - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—É—Ä—Å –∏ —Ä–∞—Å—á—ë—Ç
        from src.services.best_rate import get_best_city_rate
        
        city = data.get('city', 'moscow')
        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å USDT/RUB –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (–∫–ª–∏–µ–Ω—Ç –ø–æ–∫—É–ø–∞–µ—Ç USDT –∑–∞ —Ä—É–±–ª–∏)
        rate_info = await get_best_city_rate('USDT/RUB', city, 'buy')
        
        if rate_info:
            rate = rate_info['final_rate']
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ USDT –ø–æ–ª—É—á–∏—Ç –∫–ª–∏–µ–Ω—Ç –∑–∞ —Ä—É–±–ª–∏
            usdt_amount = amount / rate
            
            summary = (
                f"üìã <b>–ó–∞—è–≤–∫–∞ #{message.from_user.id}</b>\n\n"
                f"üîÑ –û–ø–µ—Ä–∞—Ü–∏—è: <b>–û–ø–ª–∞—Ç–∞ –∏–Ω–≤–æ–π—Å–∞</b>\n"
                f"üí∞ –û—Ç–¥–∞–µ—Ç–µ: {amount:,.0f} {currency}\n"
                f"üíé –ü–æ–ª—É—á–∞–µ—Ç–µ: {usdt_amount:,.2f} USDT\n"
                f"üìä –ö—É—Ä—Å: 1 USDT = {rate:,.2f} {currency}\n"
                f"üèô –ì–æ—Ä–æ–¥: {data.get('city_name', 'N/A')}\n"
                f"üéØ –¶–µ–ª—å: {data.get('purpose_name', 'N/A')}\n"
                f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: üíµ –ù–∞–ª–∏—á–Ω—ã–µ\n"
                f"üìé –ò–Ω–≤–æ–π—Å: –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω\n"
                f"üë§ Username: {username}\n\n"
                "–í—Å—ë –≤–µ—Ä–Ω–æ?"
            )
        else:
            # Fallback –µ—Å–ª–∏ –∫—É—Ä—Å –Ω–µ –ø–æ–ª—É—á–µ–Ω
            summary = (
                "üìã <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –∑–∞—è–≤–∫—É:</b>\n\n"
                f"üîÑ –û–ø–µ—Ä–∞—Ü–∏—è: <b>–û–ø–ª–∞—Ç–∞ –∏–Ω–≤–æ–π—Å–∞</b>\n"
                f"üí∞ –°—É–º–º–∞: ${amount}\n"
                f"üèô –ì–æ—Ä–æ–¥: {data.get('city_name', 'N/A')}\n"
                f"üéØ –¶–µ–ª—å: {data.get('purpose_name', 'N/A')}\n"
                f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: üíµ –ù–∞–ª–∏—á–Ω—ã–µ\n"
                f"üìé –ò–Ω–≤–æ–π—Å: –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω\n"
                f"üë§ Username: {username}\n\n"
                "–í—Å—ë –≤–µ—Ä–Ω–æ?"
            )
    else:
        # –î–ª—è USDT - –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É–º–º—É
        summary = (
            f"üìã <b>–ó–∞—è–≤–∫–∞ #{message.from_user.id}</b>\n\n"
            f"üîÑ –û–ø–µ—Ä–∞—Ü–∏—è: <b>–û–ø–ª–∞—Ç–∞ –∏–Ω–≤–æ–π—Å–∞</b>\n"
            f"üíé –°—É–º–º–∞: {amount:,.2f} USDT\n"
            f"üéØ –¶–µ–ª—å: {data.get('purpose_name', 'N/A')}\n"
            f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: üíé USDT\n"
            f"üìé –ò–Ω–≤–æ–π—Å: –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω\n"
            f"üë§ Username: {username}\n\n"
            "–í—Å—ë –≤–µ—Ä–Ω–æ?"
        )
    
    await message.answer(
        summary,
        reply_markup=get_confirm_keyboard_v2(),
        parse_mode="HTML"
    )


# ============================================================================
# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
# ============================================================================

@router.callback_query(PayInvoiceStates.confirm, F.data == "confirm:yes")
async def confirm_order(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    data = await state.get_data()
    
    pool = await get_pg_pool()
    async with pool.acquire() as conn:
        # –°–Ω–∞—á–∞–ª–∞ —É–±–µ–¥–∏–º—Å—è —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –ë–î –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ id
        user_id = await conn.fetchval("""
            INSERT INTO users (tg_id, username, first_name, lang)
            VALUES ($1, $2, $3, $4)
            ON CONFLICT (tg_id) DO UPDATE SET username = EXCLUDED.username
            RETURNING id
        """, 
            callback.from_user.id,
            callback.from_user.username,
            callback.from_user.first_name,
            callback.from_user.language_code or 'ru'
        )
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
        order_id = await conn.fetchval("""
            INSERT INTO orders (
                user_id, 
                order_type, 
                city, 
                payment_method, 
                purpose, 
                amount, 
                invoice_file_id,
                status, 
                username
            )
            VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
            RETURNING id
        """,
            user_id,
            'pay_invoice',
            data.get('city'),  # –º–æ–∂–µ—Ç –±—ã—Ç—å None –µ—Å–ª–∏ USDT
            data.get('payment_method'),
            data.get('purpose'),
            float(data.get('amount', 0)),
            data.get('invoice_file_id'),
            'new',
            data.get('username')
        )
    
    await state.clear()
    
    await callback.message.edit_text(
        f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{order_id} –ø—Ä–∏–Ω—è—Ç–∞!\n\n"
        f"–°–∫–æ—Ä–æ –ø—Ä–∏—à–ª–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –í–∞—à–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!"
    )
    
    await callback.answer()
    
    logger.info(f"Order #{order_id} created: pay_invoice, user={callback.from_user.id}")


@router.callback_query(PayInvoiceStates.confirm, F.data == "confirm:edit")
async def edit_order(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    await state.set_state(PayInvoiceStates.choose_purpose)
    await callback.message.edit_text(
        "üîÑ –ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ.\n\n"
        "üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –æ–ø–ª–∞—Ç—ã:</b>",
        reply_markup=get_invoice_purposes_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(PayInvoiceStates.confirm, F.data == "confirm:cancel")
async def cancel_order(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "contact_manager")
async def contact_manager(callback: CallbackQuery, state: FSMContext):
    """–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –Ω–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ"""
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    contact_message = (
        "üë®‚Äçüíº –ö–æ–Ω—Ç–∞–∫—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞\n\n"
        "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n\n"
        "–ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å!"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", url=f"https://t.me/{MANAGER_USERNAME[1:]}")],
    ])
    
    await callback.message.answer(
        contact_message,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()
