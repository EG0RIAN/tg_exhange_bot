import logging
from aiogram import Router, types
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from src.services.rapira import get_rapira_provider
from src.services.rates_calculator import get_rates_calculator
from src.services.rates_scheduler import get_scheduler_status, force_update_rates
from src.services.rates import get_current_rate, calculate_vwap_rate
from src.services.rates_calculator import OperationType

logger = logging.getLogger(__name__)
router = Router()

class RapiraAdminStates(StatesGroup):
    waiting_for_vwap_amount = State()
    waiting_for_pair = State()
    waiting_for_operation = State()

@router.message(Command("rapira_status"))
async def cmd_rapira_status(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Rapira"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        scheduler_status = await get_scheduler_status()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        provider = await get_rapira_provider()
        provider_health = provider.get_health()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        status_text = "üìä **–°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Rapira API**\n\n"
        
        # –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        status_text += "üîÑ **–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫—É—Ä—Å–æ–≤:**\n"
        status_text += f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üü¢ –†–∞–±–æ—Ç–∞–µ—Ç' if scheduler_status['is_running'] else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
        status_text += f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {scheduler_status['update_interval']} —Å–µ–∫\n"
        status_text += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {scheduler_status['last_update'] or '–ù–∏–∫–æ–≥–¥–∞'}\n"
        status_text += f"‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–π: {scheduler_status['update_count']}\n"
        status_text += f"‚Ä¢ –û—à–∏–±–æ–∫: {scheduler_status['error_count']}\n"
        
        if scheduler_status['last_error']:
            status_text += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {scheduler_status['last_error']}\n"
        
        # –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        status_text += "\nüåê **Rapira API:**\n"
        status_text += f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if provider_health.is_fresh else 'üü° –£—Å—Ç–∞—Ä–µ–ª'}\n"
        status_text += f"‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∞: {provider_health.latency:.1f} –º—Å\n"
        status_text += f"‚Ä¢ HTTP –∫–æ–¥: {provider_health.http_code}\n"
        status_text += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {provider_health.last_update.strftime('%H:%M:%S') if provider_health.last_update else '–ù–∏–∫–æ–≥–¥–∞'}\n"
        status_text += f"‚Ä¢ –û—à–∏–±–æ–∫: {provider_health.error_count}\n"
        
        if provider_health.last_error:
            status_text += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {provider_health.last_error}\n"
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã", callback_data="rapira_force_update"),
                InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å", callback_data="rapira_detailed_status")
            ],
            [
                InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="rapira_settings"),
                InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç API", callback_data="rapira_test_api")
            ]
        ])
        
        await message.answer(status_text, reply_markup=keyboard, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Failed to get Rapira status: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")

@router.callback_query(lambda c: c.data == "rapira_force_update")
async def rapira_force_update(callback: types.CallbackQuery):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫—É—Ä—Å—ã –∏–∑ Rapira"""
    try:
        await callback.answer("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤...")
        
        result = await force_update_rates()
        
        if result["success"]:
            await callback.message.edit_text(
                f"‚úÖ **–ö—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!**\n\n"
                f"‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–∞—Ä: {result['updated_count']}\n"
                f"‚Ä¢ –í—Ä–µ–º—è: {result['timestamp']}\n"
                f"‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {result['duration_ms']:.1f} –º—Å",
                parse_mode="Markdown"
            )
        else:
            await callback.message.edit_text(
                f"‚ùå **–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤**\n\n"
                f"‚Ä¢ –û—à–∏–±–∫–∞: {result['error']}\n"
                f"‚Ä¢ –í—Ä–µ–º—è: {result['timestamp']}",
                parse_mode="Markdown"
            )
            
    except Exception as e:
        logger.error(f"Force update failed: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@router.callback_query(lambda c: c.data == "rapira_detailed_status")
async def rapira_detailed_status(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å"""
    try:
        await callback.answer("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        provider = await get_rapira_provider()
        calculator = await get_rates_calculator()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—ã
        pairs = ["USDT/RUB", "BTC/USDT", "EUR/USDT"]
        rates_info = []
        
        for pair in pairs:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –¥–ª—è –æ–±–µ–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
                cash_in = await get_current_rate(pair, OperationType.CASH_IN)
                cash_out = await get_current_rate(pair, OperationType.CASH_OUT)
                
                rates_info.append({
                    "pair": pair,
                    "cash_in": cash_in,
                    "cash_out": cash_out
                })
            except Exception as e:
                rates_info.append({
                    "pair": pair,
                    "error": str(e)
                })
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        detailed_text = "üìä **–î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å Rapira API**\n\n"
        
        for info in rates_info:
            detailed_text += f"**{info['pair']}:**\n"
            
            if "error" in info:
                detailed_text += f"‚ùå –û—à–∏–±–∫–∞: {info['error']}\n"
            else:
                detailed_text += f"‚Ä¢ CASH_IN: {info['cash_in'].final_rate:.4f} (—Å–ø—Ä–µ–¥: {info['cash_in'].spread:.2f}%)\n"
                detailed_text += f"‚Ä¢ CASH_OUT: {info['cash_out'].final_rate:.4f} (—Å–ø—Ä–µ–¥: {info['cash_out'].spread:.2f}%)\n"
                detailed_text += f"‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: {info['cash_in'].source}\n"
                detailed_text += f"‚Ä¢ –í—Ä–µ–º—è: {info['cash_in'].timestamp or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
            
            detailed_text += "\n"
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="rapira_back_to_status")]
        ])
        
        await callback.message.edit_text(detailed_text, reply_markup=keyboard, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Detailed status failed: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞: {e}")

@router.callback_query(lambda c: c.data == "rapira_back_to_status")
async def rapira_back_to_status(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Å—Ç–∞—Ç—É—Å—É"""
    await cmd_rapira_status(callback.message)

@router.callback_query(lambda c: c.data == "rapira_test_api")
async def rapira_test_api(callback: types.CallbackQuery):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API Rapira"""
    try:
        await callback.answer("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API...")
        
        provider = await get_rapira_provider()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤
        test_results = []
        
        # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ plate mini
        try:
            plate = await provider.get_plate_mini("USDT/RUB")
            if plate:
                test_results.append("‚úÖ Plate mini API —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                test_results.append("‚ùå Plate mini API –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ")
        except Exception as e:
            test_results.append(f"‚ùå Plate mini API –æ—à–∏–±–∫–∞: {e}")
        
        # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ rates
        try:
            rates = await provider.get_rates()
            if rates:
                test_results.append(f"‚úÖ Rates API —Ä–∞–±–æ—Ç–∞–µ—Ç ({len(rates)} –ø–∞—Ä)")
            else:
                test_results.append("‚ùå Rates API –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ")
        except Exception as e:
            test_results.append(f"‚ùå Rates API –æ—à–∏–±–∫–∞: {e}")
        
        # –¢–µ—Å—Ç 3: –†–∞—Å—á–µ—Ç –∫—É—Ä—Å–∞
        try:
            calculator = await get_rates_calculator()
            rate = await calculator.calculate_rate("USDT/RUB", OperationType.CASH_IN)
            test_results.append(f"‚úÖ –†–∞—Å—á–µ—Ç –∫—É—Ä—Å–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç: {rate.final_rate:.2f}")
        except Exception as e:
            test_results.append(f"‚ùå –†–∞—Å—á–µ—Ç –∫—É—Ä—Å–∞ –æ—à–∏–±–∫–∞: {e}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        test_text = "üß™ **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Rapira API**\n\n"
        test_text += "\n".join(test_results)
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="rapira_back_to_status")]
        ])
        
        await callback.message.edit_text(test_text, reply_markup=keyboard, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"API test failed: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

@router.callback_query(lambda c: c.data == "rapira_settings")
async def rapira_settings(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    try:
        await callback.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        from src.services.rapira import (
            CACHE_TTL, STALE_TTL, REQUEST_TIMEOUT, 
            MAX_RETRIES, VWAP_DEFAULT_AMOUNT
        )
        
        settings_text = "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Rapira**\n\n"
        settings_text += f"‚Ä¢ **–ö—ç—à TTL:** {CACHE_TTL} —Å–µ–∫\n"
        settings_text += f"‚Ä¢ **–£—Å—Ç–∞—Ä–µ–≤–∞–Ω–∏–µ:** {STALE_TTL} —Å–µ–∫\n"
        settings_text += f"‚Ä¢ **–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞:** {REQUEST_TIMEOUT} —Å–µ–∫\n"
        settings_text += f"‚Ä¢ **–ú–∞–∫—Å. –ø–æ–ø—ã—Ç–æ–∫:** {MAX_RETRIES}\n"
        settings_text += f"‚Ä¢ **VWAP —Å—É–º–º–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:** ${VWAP_DEFAULT_AMOUNT:,.0f}\n"
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª", callback_data="rapira_change_interval"),
                InlineKeyboardButton(text="üíæ –ò–∑–º–µ–Ω–∏—Ç—å –∫—ç—à", callback_data="rapira_change_cache")
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="rapira_back_to_status")]
        ])
        
        await callback.message.edit_text(settings_text, reply_markup=keyboard, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Settings failed: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

@router.message(Command("rapira_vwap"))
async def cmd_rapira_vwap(message: types.Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞—Å—á–µ—Ç VWAP –∫—É—Ä—Å–∞"""
    await state.set_state(RapiraAdminStates.waiting_for_vwap_amount)
    await message.answer(
        "üí∞ **–†–∞—Å—á–µ—Ç VWAP –∫—É—Ä—Å–∞**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ USD –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ VWAP (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50000):",
        parse_mode="Markdown"
    )

@router.message(RapiraAdminStates.waiting_for_vwap_amount)
async def process_vwap_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é —Å—É–º–º—É –¥–ª—è VWAP"""
    try:
        amount = float(message.text)
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
        
        await state.update_data(vwap_amount=amount)
        await state.set_state(RapiraAdminStates.waiting_for_pair)
        
        await message.answer(
            f"üìä **–°—É–º–º–∞: ${amount:,.0f}**\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: USDT/RUB):",
            parse_mode="Markdown"
        )
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50000)")

@router.message(RapiraAdminStates.waiting_for_pair)
async def process_vwap_pair(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é –ø–∞—Ä—É –¥–ª—è VWAP"""
    pair = message.text.strip().upper()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø–∞—Ä—ã
    if "/" not in pair:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Ä—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç BASE/QUOTE (–Ω–∞–ø—Ä–∏–º–µ—Ä: USDT/RUB)")
        return
    
    await state.update_data(pair=pair)
    await state.set_state(RapiraAdminStates.waiting_for_operation)
    
    # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üí∏ CASH_IN (–∫–ª–∏–µ–Ω—Ç –æ—Ç–¥–∞–µ—Ç USDT)", callback_data="vwap_cash_in"),
            InlineKeyboardButton(text="üíµ CASH_OUT (–∫–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∞–µ—Ç USDT)", callback_data="vwap_cash_out")
        ]
    ])
    
    await message.answer(
        f"üìä **–ü–∞—Ä–∞: {pair}**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@router.callback_query(lambda c: c.data.startswith("vwap_"))
async def process_vwap_operation(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è VWAP"""
    try:
        operation_type = callback.data.replace("vwap_", "")
        operation = OperationType.CASH_IN if operation_type == "cash_in" else OperationType.CASH_OUT
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        amount = data.get("vwap_amount")
        pair = data.get("pair")
        
        await callback.answer("üßÆ –†–∞—Å—á–µ—Ç VWAP...")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º VWAP –∫—É—Ä—Å
        rate = await calculate_vwap_rate(pair, operation, amount)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_text = f"üí∞ **VWAP –∫—É—Ä—Å –¥–ª—è {pair}**\n\n"
        result_text += f"‚Ä¢ **–û–ø–µ—Ä–∞—Ü–∏—è:** {operation.value.upper()}\n"
        result_text += f"‚Ä¢ **–°—É–º–º–∞:** ${amount:,.0f}\n"
        result_text += f"‚Ä¢ **–ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å:** {rate.base_rate:.4f}\n"
        result_text += f"‚Ä¢ **–§–∏–Ω–∞–ª—å–Ω—ã–π –∫—É—Ä—Å:** {rate.final_rate:.4f}\n"
        result_text += f"‚Ä¢ **–°–ø—Ä–µ–¥:** {rate.spread:.2f}%\n"
        result_text += f"‚Ä¢ **–ò—Å—Ç–æ—á–Ω–∏–∫:** {rate.source}\n"
        result_text += f"‚Ä¢ **VWAP:** {'–î–∞' if rate.is_vwap else '–ù–µ—Ç'}\n"
        
        if rate.timestamp:
            result_text += f"‚Ä¢ **–í—Ä–µ–º—è:** {rate.timestamp}\n"
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç—É—Å—É", callback_data="rapira_back_to_status")]
        ])
        
        await callback.message.edit_text(result_text, reply_markup=keyboard, parse_mode="Markdown")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
    except Exception as e:
        logger.error(f"VWAP calculation failed: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ VWAP: {e}")
        await state.clear()

@router.message(Command("rapira_help"))
async def cmd_rapira_help(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º Rapira"""
    help_text = "üìö **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º Rapira API**\n\n"
    help_text += "**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
    help_text += "‚Ä¢ `/rapira_status` - –°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏\n"
    help_text += "‚Ä¢ `/rapira_vwap` - –†–∞—Å—á–µ—Ç VWAP –∫—É—Ä—Å–∞\n"
    help_text += "‚Ä¢ `/rapira_help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
    
    help_text += "**–§—É–Ω–∫—Ü–∏–∏:**\n"
    help_text += "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫\n"
    help_text += "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ VWAP –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å—É–º–º\n"
    help_text += "‚Ä¢ Fallback –Ω–∞ –ë–î –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API\n"
    help_text += "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è API\n"
    help_text += "‚Ä¢ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª (—Å–ø—Ä–µ–¥—ã, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏)\n\n"
    
    help_text += "**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä—ã:**\n"
    help_text += "‚Ä¢ USDT/RUB, BTC/USDT, EUR/USDT\n\n"
    
    help_text += "**–¢–∏–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–π:**\n"
    help_text += "‚Ä¢ CASH_IN - –∫–ª–∏–µ–Ω—Ç –æ—Ç–¥–∞–µ—Ç USDT, –ø–æ–ª—É—á–∞–µ—Ç RUB\n"
    help_text += "‚Ä¢ CASH_OUT - –∫–ª–∏–µ–Ω—Ç –æ—Ç–¥–∞–µ—Ç RUB, –ø–æ–ª—É—á–∞–µ—Ç USDT"
    
    await message.answer(help_text, parse_mode="Markdown")
