import logging
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from src.services.grinex import get_grinex_client
from src.services.fx_rates import get_fx_service
from src.services.fx_scheduler import get_fx_scheduler

logger = logging.getLogger(__name__)
router = Router()

class GrinexAdminStates(StatesGroup):
    waiting_for_pair = State()
    waiting_for_amount = State()

@router.message(Command("grinex_status"))
async def cmd_grinex_status(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Grinex"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        client = await get_grinex_client()
        health = client.get_health()
        scheduler = await get_fx_scheduler()
        scheduler_status = scheduler.get_status()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        status_text = "üìä **–°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Grinex Exchange**\n\n"
        
        # –°—Ç–∞—Ç—É—Å API
        status_text += "üåê **Grinex API:**\n"
        status_text += f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if health.is_available else 'üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}\n"
        status_text += f"‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∞: {health.latency_ms:.1f} –º—Å\n"
        status_text += f"‚Ä¢ HTTP –∫–æ–¥: {health.http_code}\n"
        status_text += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {health.last_update.strftime('%H:%M:%S')}\n"
        status_text += f"‚Ä¢ –û—à–∏–±–æ–∫: {health.error_count}\n"
        
        if health.last_error:
            status_text += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {health.last_error[:100]}\n"
        
        # –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ FX
        status_text += "\nüîÑ **FX –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫:**\n"
        status_text += f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üü¢ –†–∞–±–æ—Ç–∞–µ—Ç' if scheduler_status['running'] else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
        
        if scheduler_status['last_sync'].get('grinex'):
            status_text += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Grinex: {scheduler_status['last_sync']['grinex']}\n"
        
        if scheduler_status['config']:
            status_text += f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {scheduler_status['config']['update_interval_seconds']} —Å–µ–∫\n"
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å", callback_data="grinex_sync"),
                InlineKeyboardButton(text="üìä –ö—É—Ä—Å—ã", callback_data="grinex_rates")
            ],
            [
                InlineKeyboardButton(text="üìà –¢–∏–∫–µ—Ä—ã", callback_data="grinex_tickers"),
                InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç API", callback_data="grinex_test")
            ],
            [
                InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="grinex_settings")
            ]
        ])
        
        await message.answer(status_text, reply_markup=keyboard, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Failed to get Grinex status: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")

@router.callback_query(lambda c: c.data == "grinex_sync")
async def grinex_sync(callback: types.CallbackQuery):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫—É—Ä—Å–æ–≤ Grinex"""
    try:
        await callback.answer("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫—É—Ä—Å–æ–≤ Grinex...")
        
        scheduler = await get_fx_scheduler()
        result = await scheduler.trigger_sync('grinex')
        
        if result.get('status') == 'success':
            await callback.message.edit_text(
                f"‚úÖ **–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Grinex –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!**\n\n"
                f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∞—Ä: {result.get('pairs_processed', 0)}\n"
                f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {result.get('pairs_succeeded', 0)}\n"
                f"‚Ä¢ –û—à–∏–±–æ–∫: {result.get('pairs_failed', 0)}\n"
                f"‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {result.get('duration_ms', 0)} –º—Å",
                parse_mode="Markdown"
            )
        else:
            await callback.message.edit_text(
                f"‚ö†Ô∏è **–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Grinex –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏**\n\n"
                f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∞—Ä: {result.get('pairs_processed', 0)}\n"
                f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {result.get('pairs_succeeded', 0)}\n"
                f"‚Ä¢ –û—à–∏–±–æ–∫: {result.get('pairs_failed', 0)}",
                parse_mode="Markdown"
            )
            
    except Exception as e:
        logger.error(f"Grinex sync failed: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")

@router.callback_query(lambda c: c.data == "grinex_rates")
async def grinex_rates(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –∏–∑ Grinex"""
    try:
        await callback.answer("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –∫—É—Ä—Å–æ–≤...")
        
        fx_service = await get_fx_service()
        rates = await fx_service.get_all_final_rates(source_code='grinex', allow_stale=True)
        
        if not rates:
            await callback.message.edit_text(
                "üìä **–ö—É—Ä—Å—ã Grinex**\n\n"
                "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é.",
                parse_mode="Markdown"
            )
            return
        
        rates_text = "üìä **–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã Grinex**\n\n"
        
        for rate in rates[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 –ø–∞—Ä–∞–º–∏
            stale_mark = "üü°" if rate.stale else "üü¢"
            rates_text += f"{stale_mark} **{rate.internal_symbol}**\n"
            rates_text += f"  ‚Ä¢ Raw: {rate.raw_price:.8f}\n"
            rates_text += f"  ‚Ä¢ Final: {rate.final_price:.8f}\n"
            
            if rate.markup_percent or rate.markup_fixed:
                rates_text += f"  ‚Ä¢ –ù–∞—Ü–µ–Ω–∫–∞: {rate.markup_percent or 0}% + {rate.markup_fixed or 0}\n"
            
            rates_text += f"  ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {rate.calculated_at.strftime('%H:%M:%S')}\n\n"
        
        if len(rates) > 10:
            rates_text += f"\n_...–∏ –µ—â–µ {len(rates) - 10} –ø–∞—Ä_"
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="grinex_back")]
        ])
        
        await callback.message.edit_text(rates_text, reply_markup=keyboard, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Failed to get Grinex rates: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤: {e}")

@router.callback_query(lambda c: c.data == "grinex_tickers")
async def grinex_tickers(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∏–∫–µ—Ä—ã —Å Grinex (raw –¥–∞–Ω–Ω—ã–µ)"""
    try:
        await callback.answer("üìà –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤...")
        
        client = await get_grinex_client()
        tickers = await client.get_all_tickers()
        
        if not tickers:
            await callback.message.edit_text(
                "üìà **–¢–∏–∫–µ—Ä—ã Grinex**\n\n"
                "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ –∏–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
                parse_mode="Markdown"
            )
            return
        
        tickers_text = "üìà **–¢–∏–∫–µ—Ä—ã Grinex (Raw)**\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 8 —Ç–∏–∫–µ—Ä–æ–≤
        for symbol, ticker in list(tickers.items())[:8]:
            tickers_text += f"**{symbol}**\n"
            tickers_text += f"  ‚Ä¢ Price: {ticker.last_price}\n"
            
            if ticker.bid and ticker.ask:
                tickers_text += f"  ‚Ä¢ Bid/Ask: {ticker.bid} / {ticker.ask}\n"
            
            if ticker.volume_24h:
                tickers_text += f"  ‚Ä¢ Volume 24h: {ticker.volume_24h}\n"
            
            if ticker.change_24h:
                change_emoji = "üü¢" if ticker.change_24h > 0 else "üî¥"
                tickers_text += f"  ‚Ä¢ Change 24h: {change_emoji} {ticker.change_24h}%\n"
            
            tickers_text += "\n"
        
        if len(tickers) > 8:
            tickers_text += f"\n_–í—Å–µ–≥–æ —Ç–∏–∫–µ—Ä–æ–≤: {len(tickers)}_"
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="grinex_back")]
        ])
        
        await callback.message.edit_text(tickers_text, reply_markup=keyboard, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Failed to get Grinex tickers: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–æ–≤: {e}")

@router.callback_query(lambda c: c.data == "grinex_test")
async def grinex_test(callback: types.CallbackQuery):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Grinex API"""
    try:
        await callback.answer("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Grinex API...")
        
        client = await get_grinex_client()
        test_results = []
        
        # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞
        try:
            ticker = await client.get_ticker("USDTRUB")
            if ticker:
                test_results.append(f"‚úÖ get_ticker('USDTRUB'): {ticker.last_price}")
            else:
                test_results.append("‚ùå get_ticker('USDTRUB'): –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            test_results.append(f"‚ùå get_ticker –æ—à–∏–±–∫–∞: {str(e)[:50]}")
        
        # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤
        try:
            tickers = await client.get_all_tickers()
            if tickers:
                test_results.append(f"‚úÖ get_all_tickers(): {len(tickers)} –ø–∞—Ä")
            else:
                test_results.append("‚ùå get_all_tickers(): –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            test_results.append(f"‚ùå get_all_tickers –æ—à–∏–±–∫–∞: {str(e)[:50]}")
        
        # –¢–µ—Å—Ç 3: Health —Å—Ç–∞—Ç—É—Å
        health = client.get_health()
        test_results.append(f"{'‚úÖ' if health.is_available else '‚ùå'} Health: latency={health.latency_ms:.1f}ms, errors={health.error_count}")
        
        # –¢–µ—Å—Ç 4: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ FX —Å–µ—Ä–≤–∏—Å
        try:
            fx_service = await get_fx_service()
            result = await fx_service.sync_source_rates('grinex')
            if result['status'] == 'success':
                test_results.append(f"‚úÖ FX sync: {result['pairs_succeeded']}/{result['pairs_processed']} –ø–∞—Ä")
            else:
                test_results.append(f"‚ö†Ô∏è FX sync: {result['status']}")
        except Exception as e:
            test_results.append(f"‚ùå FX sync –æ—à–∏–±–∫–∞: {str(e)[:50]}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        test_text = "üß™ **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Grinex API**\n\n"
        test_text += "\n".join(test_results)
        test_text += f"\n\n**Latency:** {health.latency_ms:.1f} –º—Å"
        test_text += f"\n**Timestamp:** {health.last_update.strftime('%H:%M:%S')}"
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="grinex_back")]
        ])
        
        await callback.message.edit_text(test_text, reply_markup=keyboard, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Grinex test failed: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

@router.callback_query(lambda c: c.data == "grinex_settings")
async def grinex_settings(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Grinex"""
    try:
        await callback.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Grinex")
        
        from src.services.grinex import GRINEX_API_BASE, GRINEX_TIMEOUT, GRINEX_MAX_RETRIES
        from src.services.fx_scheduler import (
            FX_UPDATE_INTERVAL_SECONDS,
            FX_STALE_CHECK_INTERVAL,
            FX_STALE_THRESHOLD_SECONDS
        )
        
        settings_text = "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Grinex Exchange**\n\n"
        
        settings_text += "**API Configuration:**\n"
        settings_text += f"‚Ä¢ Base URL: {GRINEX_API_BASE}\n"
        settings_text += f"‚Ä¢ Timeout: {GRINEX_TIMEOUT} —Å–µ–∫\n"
        settings_text += f"‚Ä¢ Max retries: {GRINEX_MAX_RETRIES}\n\n"
        
        settings_text += "**FX Scheduler:**\n"
        settings_text += f"‚Ä¢ Update interval: {FX_UPDATE_INTERVAL_SECONDS} —Å–µ–∫\n"
        settings_text += f"‚Ä¢ Stale check: {FX_STALE_CHECK_INTERVAL} —Å–µ–∫\n"
        settings_text += f"‚Ä¢ Stale threshold: {FX_STALE_THRESHOLD_SECONDS} —Å–µ–∫\n\n"
        
        settings_text += "_–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞._"
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä", callback_data="grinex_pairs_stats"),
                InlineKeyboardButton(text="üîÑ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫", callback_data="grinex_scheduler_info")
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="grinex_back")]
        ])
        
        await callback.message.edit_text(settings_text, reply_markup=keyboard, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Settings failed: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

@router.callback_query(lambda c: c.data == "grinex_pairs_stats")
async def grinex_pairs_stats(callback: types.CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–∞—Ä–∞–º Grinex"""
    try:
        await callback.answer("üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        
        from src.db import get_pg_pool
        
        pool = await get_pg_pool()
        async with pool.acquire() as conn:
            stats = await conn.fetchrow("""
                SELECT 
                    COUNT(*) as total_pairs,
                    COUNT(*) FILTER (WHERE enabled = true) as enabled_pairs,
                    COUNT(DISTINCT sp.base_currency) as unique_bases,
                    COUNT(DISTINCT sp.quote_currency) as unique_quotes
                FROM fx_source_pair sp
                JOIN fx_source s ON s.id = sp.source_id
                WHERE s.code = 'grinex'
            """)
            
            # –°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞—Ä—ã
            top_pairs = await conn.fetch("""
                SELECT sp.internal_symbol, fr.final_price, fr.calculated_at, fr.stale
                FROM fx_source_pair sp
                JOIN fx_source s ON s.id = sp.source_id
                LEFT JOIN fx_final_rate fr ON fr.source_pair_id = sp.id
                WHERE s.code = 'grinex' AND sp.enabled = true
                ORDER BY fr.calculated_at DESC NULLS LAST
                LIMIT 5
            """)
        
        stats_text = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä Grinex**\n\n"
        stats_text += f"‚Ä¢ –í—Å–µ–≥–æ –ø–∞—Ä: {stats['total_pairs']}\n"
        stats_text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['enabled_pairs']}\n"
        stats_text += f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±–∞–∑–æ–≤—ã—Ö –≤–∞–ª—é—Ç: {stats['unique_bases']}\n"
        stats_text += f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ—Ç–∏—Ä—É–µ–º—ã—Ö: {stats['unique_quotes']}\n\n"
        
        if top_pairs:
            stats_text += "**–¢–æ–ø-5 –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø–∞—Ä:**\n"
            for pair in top_pairs:
                stale = "üü°" if pair['stale'] else "üü¢"
                price = f"{pair['final_price']:.4f}" if pair['final_price'] else "N/A"
                time = pair['calculated_at'].strftime('%H:%M') if pair['calculated_at'] else "N/A"
                stats_text += f"{stale} {pair['internal_symbol']}: {price} ({time})\n"
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="grinex_settings")]
        ])
        
        await callback.message.edit_text(stats_text, reply_markup=keyboard, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Pairs stats failed: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

@router.callback_query(lambda c: c.data == "grinex_scheduler_info")
async def grinex_scheduler_info(callback: types.CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ"""
    try:
        await callback.answer("üîÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ...")
        
        scheduler = await get_fx_scheduler()
        status = scheduler.get_status()
        
        info_text = "üîÑ **FX –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ - Grinex**\n\n"
        
        info_text += f"**–°—Ç–∞—Ç—É—Å:** {'üü¢ –†–∞–±–æ—Ç–∞–µ—Ç' if status['running'] else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n\n"
        
        if status['jobs']:
            info_text += "**–ó–∞–¥–∞—á–∏:**\n"
            for job in status['jobs']:
                next_run = job.get('next_run', 'N/A')
                info_text += f"‚Ä¢ {job['name']}\n"
                info_text += f"  Next run: {next_run}\n"
        
        if status['last_sync'].get('grinex'):
            info_text += f"\n**–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Grinex:**\n{status['last_sync']['grinex']}\n"
        
        if status['config']:
            info_text += f"\n**–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:**\n"
            info_text += f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {status['config']['update_interval_seconds']}s\n"
            info_text += f"‚Ä¢ Stale check: {status['config']['stale_check_interval']}s\n"
            info_text += f"‚Ä¢ Stale threshold: {status['config']['stale_threshold_seconds']}s\n"
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å", callback_data="grinex_sync"),
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="grinex_settings")
            ]
        ])
        
        await callback.message.edit_text(info_text, reply_markup=keyboard, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Scheduler info failed: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")

@router.callback_query(lambda c: c.data == "grinex_back")
async def grinex_back(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Å—Ç–∞—Ç—É—Å—É"""
    await cmd_grinex_status(callback.message)

@router.message(Command("grinex_ticker"))
async def cmd_grinex_ticker(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–∫–µ—Ä"""
    await state.set_state(GrinexAdminStates.waiting_for_pair)
    await message.answer(
        "üìà **–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞ Grinex**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –ø–∞—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: USDTRUB, BTCUSDT):",
        parse_mode="Markdown"
    )

@router.message(GrinexAdminStates.waiting_for_pair)
async def process_ticker_pair(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Ç–∏–∫–µ—Ä–∞"""
    try:
        symbol = message.text.strip().upper()
        
        client = await get_grinex_client()
        ticker = await client.get_ticker(symbol)
        
        if not ticker:
            await message.answer(f"‚ùå –¢–∏–∫–µ—Ä {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        ticker_text = f"üìà **–¢–∏–∫–µ—Ä {symbol}**\n\n"
        ticker_text += f"‚Ä¢ **Price:** {ticker.last_price}\n"
        
        if ticker.bid and ticker.ask:
            ticker_text += f"‚Ä¢ **Bid:** {ticker.bid}\n"
            ticker_text += f"‚Ä¢ **Ask:** {ticker.ask}\n"
            spread = ((ticker.ask - ticker.bid) / ticker.bid * 100) if ticker.bid else 0
            ticker_text += f"‚Ä¢ **Spread:** {spread:.2f}%\n"
        
        if ticker.volume_24h:
            ticker_text += f"‚Ä¢ **Volume 24h:** {ticker.volume_24h}\n"
        
        if ticker.high_24h and ticker.low_24h:
            ticker_text += f"‚Ä¢ **High 24h:** {ticker.high_24h}\n"
            ticker_text += f"‚Ä¢ **Low 24h:** {ticker.low_24h}\n"
        
        if ticker.change_24h:
            change_emoji = "üü¢" if ticker.change_24h > 0 else "üî¥"
            ticker_text += f"‚Ä¢ **Change 24h:** {change_emoji} {ticker.change_24h}%\n"
        
        if ticker.timestamp:
            ticker_text += f"‚Ä¢ **Timestamp:** {ticker.timestamp.strftime('%Y-%m-%d %H:%M:%S')}\n"
        
        await message.answer(ticker_text, parse_mode="Markdown")
        await state.clear()
        
    except Exception as e:
        logger.error(f"Failed to get ticker: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–∞: {e}")
        await state.clear()

@router.message(Command("grinex_help"))
async def cmd_grinex_help(message: types.Message):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º Grinex"""
    help_text = "üìö **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º Grinex**\n\n"
    help_text += "**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
    help_text += "‚Ä¢ `/grinex_status` - –°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Grinex\n"
    help_text += "‚Ä¢ `/grinex_ticker` - –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–∫–µ—Ä\n"
    help_text += "‚Ä¢ `/grinex_help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
    
    help_text += "**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
    help_text += "‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª-—Ç–∞–π–º —Ç–∏–∫–µ—Ä–æ–≤\n"
    help_text += "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫—É—Ä—Å–æ–≤\n"
    help_text += "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –Ω–∞—Ü–µ–Ω–æ–∫ (–ø—Ä–æ—Ü–µ–Ω—Ç + —Ñ–∏–∫—Å)\n"
    help_text += "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–∞–≤–∏–ª (pair > source > global)\n"
    help_text += "‚Ä¢ Health –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ API\n"
    help_text += "‚Ä¢ Stale detection –¥–ª—è —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö\n\n"
    
    help_text += "**–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å:**\n"
    help_text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ `/grinex_status` –¥–ª—è:\n"
    help_text += "‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫—É—Ä—Å–æ–≤\n"
    help_text += "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–∏—Ö –∫—É—Ä—Å–æ–≤\n"
    help_text += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–∫–µ—Ä–æ–≤\n"
    help_text += "‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API\n"
    help_text += "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–∫\n\n"
    
    help_text += "**Web Admin:**\n"
    help_text += "http://localhost:8000/admin/fx/sources"
    
    await message.answer(help_text, parse_mode="Markdown")

