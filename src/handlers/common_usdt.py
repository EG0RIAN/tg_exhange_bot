"""
–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏ USDT
–£—Å—Ç—Ä–∞–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –º–µ–∂–¥—É buy_usdt.py –∏ sell_usdt.py
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from typing import Optional, Dict
import logging

from src.keyboards import (
    get_priority_cities_keyboard,
    get_all_cities_keyboard,
    get_currencies_keyboard,
    get_amount_keyboard_v2,
    get_confirm_keyboard_v2,
    get_rate_confirm_keyboard,
)
from src.db import get_pg_pool

logger = logging.getLogger(__name__)

MANAGER_USERNAME = "@btc_otc"


# ============================================================================
# –û–±—â–∏–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ============================================================================

async def handle_contact_manager(callback: CallbackQuery):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"""
    contact_message = (
        "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n\n"
        "–ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å!"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", url=f"https://t.me/{MANAGER_USERNAME[1:]}")],
    ])
    
    await callback.message.answer(
        contact_message,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()


def get_operation_emoji(operation: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç emoji –¥–ª—è —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    return "üíµ" if operation == "buy" else "üí∏"


def get_operation_text(operation: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    return "–ü–æ–∫—É–ø–∫–∞ USDT" if operation == "buy" else "–ü—Ä–æ–¥–∞–∂–∞ USDT"


def get_operation_action(operation: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    return "–ö—É–ø–∏—Ç—å" if operation == "buy" else "–ü—Ä–æ–¥–∞—Ç—å"


# ============================================================================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
# ============================================================================

async def handle_choose_city(
    callback: CallbackQuery,
    state: FSMContext,
    operation: str,
    next_state
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞"""
    city_code = callback.data.split(":", 1)[1]
    
    if city_code == "other":
        return  # –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ show_all_cities
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ –ë–î
    pool = await get_pg_pool()
    async with pool.acquire() as conn:
        city_row = await conn.fetchrow(
            "SELECT name FROM cities WHERE code = $1 AND enabled = true",
            city_code
        )
    
    if not city_row:
        await callback.answer("‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    city_name = city_row['name']
    
    await state.update_data(city=city_code, city_name=city_name)
    await state.set_state(next_state)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫—É—Ä—Å–∞
    data = await state.get_data()
    amount = float(data.get('amount', 0))
    
    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å USDT/RUB
    from src.services.best_rate import get_best_city_rate
    
    rate_info = await get_best_city_rate('USDT/RUB', city_code, operation)
    
    if rate_info:
        rate = rate_info['final_rate']
        rub_amount = amount * rate
        
        if operation == "buy":
            rate_text = (
                f"‚úÖ –ì–æ—Ä–æ–¥: {city_name}\n"
                f"üí∞ –°—É–º–º–∞: {amount:,.0f} USDT\n\n"
                f"üìä <b>–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å:</b>\n"
                f"1 USDT = {rate:,.2f} RUB\n\n"
                f"üíµ <b>–ö –æ–ø–ª–∞—Ç–µ:</b> {rub_amount:,.2f} RUB\n\n"
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∫—É—Ä—Å?"
            )
        else:  # sell
            rate_text = (
                f"‚úÖ –ì–æ—Ä–æ–¥: {city_name}\n"
                f"üí∞ –°—É–º–º–∞: {amount:,.0f} USDT\n\n"
                f"üìä <b>–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å:</b>\n"
                f"1 USDT = {rate:,.2f} RUB\n\n"
                f"üíµ <b>–í—ã –ø–æ–ª—É—á–∏—Ç–µ:</b> {rub_amount:,.2f} RUB\n\n"
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∫—É—Ä—Å?"
            )
    else:
        # Fallback –µ—Å–ª–∏ –∫—É—Ä—Å –Ω–µ –ø–æ–ª—É—á–µ–Ω
        rate_text = (
            f"‚úÖ –ì–æ—Ä–æ–¥: {city_name}\n"
            f"üí∞ –°—É–º–º–∞: {amount:,.0f} USDT\n\n"
            "‚ö†Ô∏è <b>–ö—É—Ä—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏?"
        )
    
    await callback.message.edit_text(
        rate_text,
        reply_markup=get_rate_confirm_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


# ============================================================================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
# ============================================================================

async def handle_confirm_order(
    callback: CallbackQuery,
    state: FSMContext,
    order_type: str
):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    logger.info(f"Confirming {order_type} order from user {callback.from_user.id}")
    data = await state.get_data()
    logger.info(f"Order data: {data}")
    
    pool = await get_pg_pool()
    async with pool.acquire() as conn:
        # –°–Ω–∞—á–∞–ª–∞ —É–±–µ–¥–∏–º—Å—è —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –ë–î –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ id
        user_id = await conn.fetchval("""
            INSERT INTO users (tg_id, username, first_name, lang)
            VALUES ($1, $2, $3, $4)
            ON CONFLICT (tg_id) DO UPDATE SET username = EXCLUDED.username
            RETURNING id
        """, 
            callback.from_user.id,
            callback.from_user.username,
            callback.from_user.first_name,
            callback.from_user.language_code or 'ru'
        )
        
        # –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º user_id
        order_id = await conn.fetchval("""
            INSERT INTO orders (
                user_id, 
                order_type, 
                city, 
                currency, 
                amount, 
                status, 
                username
            )
            VALUES ($1, $2, $3, $4, $5, $6, $7)
            RETURNING id
        """,
            user_id,
            order_type,
            data.get('city'),
            data.get('currency'),
            float(data.get('amount', 0)),
            'new',
            data.get('username')
        )
    
    await state.clear()
    
    await callback.message.edit_text(
        f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{order_id} –ø—Ä–∏–Ω—è—Ç–∞!\n\n"
        f"–°–∫–æ—Ä–æ –ø—Ä–∏—à–ª–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –í–∞—à–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!"
    )
    
    await callback.answer()
    
    logger.info(f"Order #{order_id} created: {order_type}, user={callback.from_user.id}")


# ============================================================================
# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–π –∑–∞—è–≤–∫–∏
# ============================================================================

async def format_order_summary(
    data: Dict,
    user_id: int,
    operation: str
) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏—Ç–æ–≥–æ–≤–æ–π –∑–∞—è–≤–∫–∏"""
    from src.services.best_rate import get_best_city_rate
    
    amount = float(data.get('amount', 0))
    city = data.get('city', 'moscow')
    currency = data.get('currency', 'RUB')
    username = data.get('username', 'N/A')
    city_name = data.get('city_name', 'N/A')
    
    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å USDT/RUB
    rate_info = await get_best_city_rate('USDT/RUB', city, operation)
    
    if rate_info:
        rate = rate_info['final_rate']
        rub_amount = amount * rate
        
        if operation == "buy":
            summary = (
                f"üìã <b>–ó–∞—è–≤–∫–∞ #{user_id}</b>\n\n"
                f"üîÑ –û–ø–µ—Ä–∞—Ü–∏—è: <b>{get_operation_text(operation)}</b>\n"
                f"üí∞ –û—Ç–¥–∞–µ—Ç–µ: {rub_amount:,.2f} {currency}\n"
                f"üíé –ü–æ–ª—É—á–∞–µ—Ç–µ: {amount:,.0f} USDT\n"
                f"üìä –ö—É—Ä—Å: 1 USDT = {rate:,.2f} {currency}\n"
                f"üèô –ì–æ—Ä–æ–¥: {city_name}\n"
                f"üë§ Username: {username}\n\n"
                "–í—Å—ë –≤–µ—Ä–Ω–æ?"
            )
        else:  # sell
            summary = (
                f"üìã <b>–ó–∞—è–≤–∫–∞ #{user_id}</b>\n\n"
                f"üîÑ –û–ø–µ—Ä–∞—Ü–∏—è: <b>{get_operation_text(operation)}</b>\n"
                f"üíé –û—Ç–¥–∞–µ—Ç–µ: {amount:,.0f} USDT\n"
                f"üí∞ –ü–æ–ª—É—á–∞–µ—Ç–µ: {rub_amount:,.0f} {currency}\n"
                f"üìä –ö—É—Ä—Å: 1 USDT = {rate:,.2f} {currency}\n"
                f"üèô –ì–æ—Ä–æ–¥: {city_name}\n"
                f"üë§ Username: {username}\n\n"
                "–í—Å—ë –≤–µ—Ä–Ω–æ?"
            )
    else:
        # Fallback –µ—Å–ª–∏ –∫—É—Ä—Å –Ω–µ –ø–æ–ª—É—á–µ–Ω
        summary = (
            "üìã <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –∑–∞—è–≤–∫—É:</b>\n\n"
            f"üîÑ –û–ø–µ—Ä–∞—Ü–∏—è: <b>{get_operation_text(operation)}</b>\n"
            f"üí∞ –°—É–º–º–∞: ${data.get('amount', 'N/A')} USDT\n"
            f"üèô –ì–æ—Ä–æ–¥: {city_name}\n"
            f"üí± –í–∞–ª—é—Ç–∞: {data.get('currency', 'N/A')}\n"
            f"üë§ Username: {username}\n\n"
            "–í—Å—ë –≤–µ—Ä–Ω–æ?"
        )
    
    return summary

