"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—É—Ç–∏ "–ü—Ä–æ–¥–∞—Ç—å USDT"
–ö–ª–∏–µ–Ω—Ç –ø—Ä–æ–¥–∞–µ—Ç USDT –∑–∞ –Ω–∞–ª–∏—á–Ω—ã–µ
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from src.fsm import SellUSDTStates
from src.keyboards import (
    get_countries_keyboard,
    get_priority_cities_keyboard,
    get_all_cities_keyboard,
    get_currencies_keyboard,
    get_amount_keyboard_v2,
    get_confirm_keyboard_v2,
    main_menu
)
from src.db import get_pg_pool
import logging

router = Router()
logger = logging.getLogger(__name__)

MANAGER_USERNAME = "@manager"


@router.message(F.text == "üí∏ –ü—Ä–æ–¥–∞—Ç—å USDT")
async def start_sell_usdt(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—É—Ç–∏ –ø—Ä–æ–¥–∞–∂–∏ USDT"""
    await state.clear()
    await state.set_state(SellUSDTStates.choose_country)
    
    await message.answer(
        "üåç <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:</b>",
        reply_markup=get_countries_keyboard(),
        parse_mode="HTML"
    )


@router.callback_query(SellUSDTStates.choose_country, F.data.startswith("country:"))
async def choose_country(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω—ã"""
    country = callback.data.split(":", 1)[1]
    
    country_names = {
        "russia": "üá∑üá∫ –†–æ—Å—Å–∏—è",
        "kazakhstan": "üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω",
        "uzbekistan": "üá∫üáø –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω",
        "azerbaijan": "üá¶üáø –ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω",
        "georgia": "üá¨üá™ –ì—Ä—É–∑–∏—è",
        "turkey": "üáπüá∑ –¢—É—Ä—Ü–∏—è",
        "uae": "üá¶üá™ –û–ê–≠",
    }
    
    await state.update_data(country=country, country_name=country_names.get(country, country))
    await state.set_state(SellUSDTStates.choose_city)
    
    await callback.message.edit_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∞: {country_names.get(country)}\n\n"
        "üèô <b>–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:</b>",
        reply_markup=await get_priority_cities_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(SellUSDTStates.choose_city, F.data == "city:other")
async def show_all_cities(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≥–æ—Ä–æ–¥–∞"""
    await callback.message.edit_text(
        "üåç <b>–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:</b>",
        reply_markup=await get_all_cities_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(SellUSDTStates.choose_city, F.data == "back_to_priority_cities")
async def back_to_priority_cities(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–º –≥–æ—Ä–æ–¥–∞–º"""
    await callback.message.edit_text(
        "üèô <b>–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:</b>",
        reply_markup=await get_priority_cities_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(SellUSDTStates.choose_city, F.data.startswith("city:"))
async def choose_city(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞"""
    city_code = callback.data.split(":", 1)[1]
    
    if city_code == "other":
        return
    
    pool = await get_pg_pool()
    async with pool.acquire() as conn:
        city_row = await conn.fetchrow(
            "SELECT name FROM cities WHERE code = $1 AND enabled = true",
            city_code
        )
    
    if not city_row:
        await callback.answer("‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    city_name = city_row['name']
    
    await state.update_data(city=city_code, city_name=city_name)
    await state.set_state(SellUSDTStates.choose_currency)
    
    data = await state.get_data()
    country = data.get('country', 'russia')
    
    await callback.message.edit_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥: {city_name}\n\n"
        "üí± <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–ª–∏—á–Ω—ã—Ö:</b>",
        reply_markup=get_currencies_keyboard(country),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(SellUSDTStates.choose_currency, F.data.startswith("currency:"))
async def choose_currency(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã"""
    currency = callback.data.split(":", 1)[1]
    
    await state.update_data(currency=currency)
    await state.set_state(SellUSDTStates.enter_amount)
    
    await callback.message.edit_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –≤–∞–ª—é—Ç–∞: {currency}\n\n"
        "üí∞ <b>–°–∫–æ–ª—å–∫–æ USDT –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å?</b>",
        reply_markup=get_amount_keyboard_v2(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(SellUSDTStates.enter_amount, F.data == "amount:custom")
async def amount_custom(callback: CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ —Å–≤–æ–µ–π —Å—É–º–º—ã"""
    await callback.message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É USDT (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000):"
    )
    await callback.answer()


@router.callback_query(SellUSDTStates.enter_amount, F.data.startswith("amount:"))
async def amount_selected(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Å—É–º–º—ã –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö"""
    amount = callback.data.split(":", 1)[1]
    
    if amount == "custom":
        return
    
    await state.update_data(amount=amount)
    await state.set_state(SellUSDTStates.enter_username)
    
    await callback.message.edit_text(
        f"‚úÖ –°—É–º–º–∞: ${amount} USDT\n\n"
        "üë§ <b>–û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à Telegram username:</b>\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: @yourname)",
        parse_mode="HTML"
    )
    await callback.answer()


@router.message(SellUSDTStates.enter_amount, F.text)
async def amount_entered(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º—ã"""
    try:
        amount = float(message.text.replace(",", ".").replace(" ", ""))
        if amount <= 0:
            raise ValueError
        
        await state.update_data(amount=str(int(amount)))
        await state.set_state(SellUSDTStates.enter_username)
        
        await message.answer(
            f"‚úÖ –°—É–º–º–∞: ${int(amount)} USDT\n\n"
            "üë§ <b>–û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à Telegram username:</b>\n"
            "(–Ω–∞–ø—Ä–∏–º–µ—Ä: @yourname)",
            parse_mode="HTML"
        )
    except (ValueError, AttributeError):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000):"
        )


@router.message(SellUSDTStates.enter_username, F.text)
async def enter_username(message: Message, state: FSMContext):
    """–í–≤–æ–¥ username"""
    username = message.text.strip()
    
    await state.update_data(username=username)
    await state.set_state(SellUSDTStates.confirm)
    
    data = await state.get_data()
    
    summary = (
        "üìã <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –∑–∞—è–≤–∫—É:</b>\n\n"
        f"üîÑ –û–ø–µ—Ä–∞—Ü–∏—è: <b>–ü—Ä–æ–¥–∞–∂–∞ USDT</b>\n"
        f"üåç –°—Ç—Ä–∞–Ω–∞: {data.get('country_name', 'N/A')}\n"
        f"üèô –ì–æ—Ä–æ–¥: {data.get('city_name', 'N/A')}\n"
        f"üí± –í–∞–ª—é—Ç–∞ –≤—ã–¥–∞—á–∏: {data.get('currency', 'N/A')}\n"
        f"üí∞ –°—É–º–º–∞: ${data.get('amount', 'N/A')} USDT\n"
        f"üë§ Username: {username}\n\n"
        "–í—Å—ë –≤–µ—Ä–Ω–æ?"
    )
    
    await message.answer(
        summary,
        reply_markup=get_confirm_keyboard_v2(),
        parse_mode="HTML"
    )


@router.callback_query(SellUSDTStates.confirm, F.data == "confirm:yes")
async def confirm_order(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    data = await state.get_data()
    
    pool = await get_pg_pool()
    async with pool.acquire() as conn:
        order_id = await conn.fetchval("""
            INSERT INTO orders (
                user_id, username, order_type, country, city, currency, amount, status, created_at
            ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, NOW())
            RETURNING id
        """,
            callback.from_user.id,
            data.get('username'),
            'sell_usdt',
            data.get('country'),
            data.get('city'),
            data.get('currency'),
            data.get('amount'),
            'new'
        )
    
    await state.clear()
    
    await callback.message.edit_text(
        f"‚úÖ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{order_id} –ø—Ä–∏–Ω—è—Ç–∞!</b>\n\n"
        f"üîÑ –° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä {MANAGER_USERNAME}\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!",
        parse_mode="HTML"
    )
    
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu
    )
    
    await callback.answer()
    
    logger.info(f"Order #{order_id} created: sell_usdt, user={callback.from_user.id}")


@router.callback_query(SellUSDTStates.confirm, F.data == "confirm:edit")
async def edit_order(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    await state.set_state(SellUSDTStates.choose_country)
    await callback.message.edit_text(
        "üîÑ –ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ.\n\n"
        "üåç <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:</b>",
        reply_markup=get_countries_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(SellUSDTStates.confirm, F.data == "confirm:cancel")
async def cancel_order(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        parse_mode="HTML"
    )
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu
    )
    await callback.answer()


@router.callback_query(F.data == "contact_manager")
async def contact_manager(callback: CallbackQuery, state: FSMContext):
    """–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –Ω–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ"""
    await callback.answer(
        f"–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É: {MANAGER_USERNAME}",
        show_alert=True
    )

