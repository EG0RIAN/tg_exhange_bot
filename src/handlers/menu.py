from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from src.keyboards import main_menu, get_trading_pairs_keyboard, get_rates_back_keyboard, get_cities_keyboard
from src.i18n import _, detect_user_lang
from src.db import get_pg_pool
from src.services.content import format_rates_display, get_trading_pairs, get_rate_tiers_for_pair
from src.services.faq import get_categories
import logging

logger = logging.getLogger(__name__)
router = Router()

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç FSM –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    pool = await get_pg_pool()
    lang = await detect_user_lang(message.from_user, db_pool=pool)
    await message.answer(_("start_message", lang=lang), reply_markup=main_menu)

@router.message(F.text == "/start")
async def menu_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ /start"""
    await state.clear()
    pool = await get_pg_pool()
    lang = await detect_user_lang(message.from_user, db_pool=pool)
    await message.answer(_("start_message", lang=lang), reply_markup=main_menu)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ FAQ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ src/handlers/faq.py

@router.message(F.text == "üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")
async def menu_contact_manager(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ '–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º' –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    contact_message = (
        "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n\n"
        "–ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å!"
    )
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üì± –ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", url="https://t.me/btc_otc")]
        ]
    )
    
    await message.answer(contact_message, reply_markup=keyboard)

@router.callback_query(F.data.startswith("city:"))
async def show_city_rates(callback: CallbackQuery, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º - –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ FSM —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–¥–µ—Å—å
    current_state = await state.get_state()
    if current_state is not None:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        return
    
    city_code = callback.data.split(":", 1)[1]
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ "–û—Å—Ç–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ–¥–∞", –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö —Å–ø–∏—Å–æ–∫
    if city_code == "other":
        from src.keyboards import get_all_cities_keyboard
        await callback.message.edit_text("üåç –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=await get_all_cities_keyboard())
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ –ë–î
    pool = await get_pg_pool()
    async with pool.acquire() as conn:
        city_row = await conn.fetchrow("SELECT name FROM cities WHERE code = $1 AND enabled = true", city_code)
        city_name = city_row['name'] if city_row else city_code
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –≥–æ—Ä–æ–¥
    priority_cities = ['moscow', 'spb', 'krasnodar', 'rostov']
    is_priority = city_code in priority_cities
    await state.update_data(rates_from_priority=is_priority)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
    from src.services.client_rates import format_rates_for_display
    
    rates_text = await format_rates_for_display(city_code, city_name)
    
    await callback.message.edit_text(
        rates_text,
        parse_mode="Markdown",
        reply_markup=get_rates_back_keyboard()
    )

@router.callback_query(F.data == "rates_back")
async def rates_back(callback: CallbackQuery, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    data = await state.get_data()
    from_priority = data.get('rates_from_priority', True)
    
    if from_priority:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–º –≥–æ—Ä–æ–¥–∞–º
        await callback.message.edit_text("üåç –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫—É—Ä—Å–æ–≤:", reply_markup=await get_cities_keyboard())
    else:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤
        from src.keyboards import get_all_cities_keyboard
        await callback.message.edit_text("üåç –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=await get_all_cities_keyboard())
    
    # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥
    await state.update_data(rates_from_priority=None)

@router.callback_query(F.data == "back_to_priority_cities")
async def back_to_priority_cities(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–º –≥–æ—Ä–æ–¥–∞–º"""
    await callback.message.edit_text("üåç –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫—É—Ä—Å–æ–≤:", reply_markup=await get_cities_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ src/handlers/livechat.py

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ src/handlers/settings.py

@router.message(Command("health"))
async def cmd_health(message: Message):
    await message.answer("‚úÖ Bot is alive!") 